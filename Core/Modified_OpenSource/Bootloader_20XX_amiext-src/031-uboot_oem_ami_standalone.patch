diff -Naur uboot/oem/ami/standalone/nettest/comminf.h uboot_new/oem/ami/standalone/nettest/comminf.h
--- uboot/oem/ami/standalone/nettest/comminf.h	2020-07-28 14:45:38.789078065 -0400
+++ uboot_new/oem/ami/standalone/nettest/comminf.h	2020-07-28 16:18:05.292791062 -0400
@@ -326,7 +326,7 @@
 // For ncsi.c
 
 #define DEF_GPACKAGE2NUM                         1         // Default value
-#define DEF_GCHANNEL2NUM                         2         // Default value
+#define DEF_GCHANNEL2NUM                         1         // Default value
 
 //---------------------------------------------------------
 // Variable
diff -Naur uboot/oem/ami/standalone/nettest/mac.c uboot_new/oem/ami/standalone/nettest/mac.c
--- uboot/oem/ami/standalone/nettest/mac.c	2020-07-28 14:45:38.789078065 -0400
+++ uboot_new/oem/ami/standalone/nettest/mac.c	2020-07-28 16:18:05.292791062 -0400
@@ -336,12 +336,13 @@
 {
 	get_mac_rmii_delay_2(p_eng->io.mac34_1g_delay.addr, p_rx_d, p_tx_d);
 }
+#if 0
 static
 void get_dummy_delay(MAC_ENGINE *p_eng, int32_t *p_rx_d, int32_t *p_tx_d)
 {
 	debug("%s\n", __func__);
 }
-
+#endif
 /**
  * @brief function pointer table to get current delay setting
  * 
@@ -350,11 +351,11 @@
 typedef void (*pfn_get_delay) (MAC_ENGINE *, int32_t *, int32_t *);
 pfn_get_delay get_delay_func_tbl[2][4][3] = {
 		{
-				{get_mac1_rmii_delay, get_dummy_delay, get_dummy_delay},
-				{get_mac2_rmii_delay, get_dummy_delay, get_dummy_delay},
+		{get_mac1_rmii_delay, get_mac1_rmii_delay, get_mac1_rmii_delay},
+		{get_mac2_rmii_delay, get_mac2_rmii_delay, get_mac2_rmii_delay},
 #if defined(CONFIG_ASPEED_AST2600)
-				{get_mac3_rmii_delay, get_dummy_delay, get_dummy_delay},
-				{get_mac4_rmii_delay, get_dummy_delay, get_dummy_delay},
+		{get_mac3_rmii_delay, get_mac3_rmii_delay, get_mac3_rmii_delay},
+		{get_mac4_rmii_delay, get_mac4_rmii_delay, get_mac4_rmii_delay},
 #else
 				{get_dummy_delay, get_dummy_delay, get_dummy_delay},
 				{get_dummy_delay, get_dummy_delay, get_dummy_delay},
@@ -630,11 +631,11 @@
 typedef void (*pfn_set_delay) (MAC_ENGINE *, int32_t, int32_t);
 pfn_set_delay set_delay_func_tbl[2][4][3] = {
 		{
-				{set_mac1_rmii_delay, set_dummy_delay, set_dummy_delay},
-				{set_mac2_rmii_delay, set_dummy_delay, set_dummy_delay},
+		{set_mac1_rmii_delay, set_mac1_rmii_delay, set_mac1_rmii_delay},
+		{set_mac2_rmii_delay, set_mac2_rmii_delay, set_mac2_rmii_delay},
 #if defined(CONFIG_ASPEED_AST2600)
-				{set_mac3_rmii_delay, set_dummy_delay, set_dummy_delay},
-				{set_mac4_rmii_delay, set_dummy_delay, set_dummy_delay},
+		{set_mac3_rmii_delay, set_mac3_rmii_delay, set_mac3_rmii_delay},
+		{set_mac4_rmii_delay, set_mac4_rmii_delay, set_mac4_rmii_delay},
 #else
 				{set_dummy_delay, set_dummy_delay, set_dummy_delay},
 				{set_dummy_delay, set_dummy_delay, set_dummy_delay},
@@ -1011,8 +1012,6 @@
 	if (!eng->run.TM_RxDataEn) {
 	} else if (eng->flg.Err_Flag) {
 		PRINTF(option, "                    \n----> fail !!!\n");
-	} else {
-		PRINTF(option, "                    \n----> All Pass !!!\n");
 	}
 
 	//------------------------------
@@ -1027,10 +1026,10 @@
 	//[Warning] IO Strength
 	//------------------------------
 #ifdef CONFIG_ASPEED_AST2600
-	if (eng->io.init_done && (eng->io.mac34_drv_reg.value.w != 0xa)) {
+	if (eng->io.init_done && (eng->io.mac34_drv_reg.value.w != 0xf)) {
 		PRINTF(option,
 				"\n[Warning] [%08X] 0x%08x is not the suggestion value "
-				"0xa.\n",
+		       "0xf.\n",
 				eng->io.mac34_drv_reg.addr,
 				eng->io.mac34_drv_reg.value.w);
 #else
@@ -1101,7 +1100,6 @@
 		} // End if ( eng->arg.run_mode == MODE_NCSI )
 
 
-		PRINTF( option, "[Ver II] %s\n", version_name );
 	} // End void FPri_End (MAC_ENGINE *eng, uint8_t option)
 
 	//------------------------------------------------------------
@@ -1935,11 +1933,14 @@
 		while (HWOwnRx(eng->dat.RxDes0DW)) {
 			// we will run again, if transfer has not been completed.
 			if (eng->run.TM_TxDataEn && (++timeout > eng->run.timeout_th)) {
+#if 0			
 				printf("[%sRxDesOwn] Address %08x = %08x "
 						"[Des:%d][loop[%d]:%d]\n",
 						type, adr, eng->dat.RxDes0DW, desnum,
 						eng->run.loop_of_cnt, eng->run.loop_cnt);
-				return (FindErr_Des(eng, Des_Flag_RxOwnTimeOut));
+#endif
+			FindErr_Des(eng, Des_Flag_RxOwnTimeOut);
+			return (2);
 			}
 
 #ifdef Delay_ChkRxOwn
@@ -1960,45 +1961,45 @@
 		}
 #endif // End CheckRxLen
 
-		if ( eng->dat.RxDes0DW & Check_ErrMask_ALL ) {
+	if ( eng->dat.RxDes0DW & RXDES_EM_ALL ) {
 			eng->dat.RxDes3DW = Read_Mem_Des_DD( adr + 12 );
 #ifdef CheckRxErr
-			if ( eng->dat.RxDes0DW & Check_ErrMask_RxErr ) {
+		if ( eng->dat.RxDes0DW & RXDES_EM_RXERR ) {
 				PRINTF( FP_LOG, "[%sRxDes] Error RxErr        %08x:%08x %08x            [Des:%d][loop[%d]:%d]\n", type, adr, eng->dat.RxDes0DW, eng->dat.RxDes3DW, desnum, eng->run.loop_of_cnt, eng->run.loop_cnt );
 				FindErr_Des( eng, Des_Flag_RxErr );
 			}
 #endif // End CheckRxErr
 
 #ifdef CheckCRC
-			if ( eng->dat.RxDes0DW & Check_ErrMask_CRC ) {
+		if ( eng->dat.RxDes0DW & RXDES_EM_CRC ) {
 				PRINTF( FP_LOG, "[%sRxDes] Error CRC          %08x:%08x %08x            [Des:%d][loop[%d]:%d]\n", type, adr, eng->dat.RxDes0DW, eng->dat.RxDes3DW, desnum, eng->run.loop_of_cnt, eng->run.loop_cnt );
 				FindErr_Des( eng, Des_Flag_CRC );
 			}
 #endif // End CheckCRC
 
 #ifdef CheckFTL
-			if ( eng->dat.RxDes0DW & Check_ErrMask_FTL ) {
+		if ( eng->dat.RxDes0DW & RXDES_EM_FTL ) {
 				PRINTF( FP_LOG, "[%sRxDes] Error FTL          %08x:%08x %08x            [Des:%d][loop[%d]:%d]\n", type, adr, eng->dat.RxDes0DW, eng->dat.RxDes3DW, desnum, eng->run.loop_of_cnt, eng->run.loop_cnt );
 				FindErr_Des( eng, Des_Flag_FTL );
 			}
 #endif // End CheckFTL
 
 #ifdef CheckRunt
-			if ( eng->dat.RxDes0DW & Check_ErrMask_Runt) {
+		if ( eng->dat.RxDes0DW & RXDES_EM_RUNT) {
 				PRINTF( FP_LOG, "[%sRxDes] Error Runt         %08x:%08x %08x            [Des:%d][loop[%d]:%d]\n", type, adr, eng->dat.RxDes0DW, eng->dat.RxDes3DW, desnum, eng->run.loop_of_cnt, eng->run.loop_cnt );
 				FindErr_Des( eng, Des_Flag_Runt );
 			}
 #endif // End CheckRunt
 
 #ifdef CheckOddNibble
-			if ( eng->dat.RxDes0DW & Check_ErrMask_OddNibble ) {
+		if ( eng->dat.RxDes0DW & RXDES_EM_ODD_NB ) {
 				PRINTF( FP_LOG, "[%sRxDes] Odd Nibble         %08x:%08x %08x            [Des:%d][loop[%d]:%d]\n", type, adr, eng->dat.RxDes0DW, eng->dat.RxDes3DW, desnum, eng->run.loop_of_cnt, eng->run.loop_cnt );
 				FindErr_Des( eng, Des_Flag_OddNibble );
 			}
 #endif // End CheckOddNibble
 
 #ifdef CheckRxFIFOFull
-			if ( eng->dat.RxDes0DW & Check_ErrMask_RxFIFOFull ) {
+		if ( eng->dat.RxDes0DW & RXDES_EM_FIFO_FULL ) {
 				PRINTF( FP_LOG, "[%sRxDes] Error Rx FIFO Full %08x:%08x %08x            [Des:%d][loop[%d]:%d]\n", type, adr, eng->dat.RxDes0DW, eng->dat.RxDes3DW, desnum, eng->run.loop_of_cnt, eng->run.loop_cnt );
 				FindErr_Des( eng, Des_Flag_RxFIFOFull );
 			}
@@ -2027,12 +2028,13 @@
 		uint32_t      dly_cnt = 0;
 		uint32_t      dly_max = Delay_CntMaxIncVal;
 #endif
+	int ret;
 
 		nt_log_func_name();
 
 		// Fire the engine to send and recvice
-		mac_reg_write(eng, 0x1c, 0x00000000); // Rx Poll
-		mac_reg_write(eng, 0x18, 0x00000000); // Tx Poll
+	mac_reg_write(eng, 0x1c, 0x00000001); // Rx Poll
+	mac_reg_write(eng, 0x18, 0x00000001); // Tx Poll
 
 #ifndef SelectSimpleDes
 		H_tx_bufadr = AT_MEMRW_BUF( eng->dat.DMA_Base_Tx );//base of the descriptor
@@ -2097,17 +2099,22 @@
 			}
 
 			// Check the description of Tx and Rx
-			if (eng->run.TM_TxDataEn &&
-					check_des_header_Tx(eng, "", H_tx_desadr, desnum)) {
+		if (eng->run.TM_TxDataEn) {
+			ret = check_des_header_Tx(eng, "", H_tx_desadr, desnum);
+			if (ret) {
 				eng->flg.CheckDesFail_DesNum = desnum;
 
-				return (1);
+				return ret;
 			}
-			if ( eng->run.TM_RxDataEn && check_des_header_Rx( eng, "", H_rx_desadr, desnum ) ) {
+		}
+		if (eng->run.TM_RxDataEn) {
+			ret = check_des_header_Rx(eng, "", H_rx_desadr, desnum);
+			if (ret) {
 				eng->flg.CheckDesFail_DesNum = desnum;
 
-				return(1);
+				return ret;
 			}
+		}
 
 #ifndef SelectSimpleDes
 			if ( !checkpoint ) {
@@ -2170,9 +2177,9 @@
 			}
 		}
 
-		if      ( eng->run.speed_sel[ 0 ] ) { PRINTF( option, "[1G  ]========================================>\n" ); }
-		else if ( eng->run.speed_sel[ 1 ] ) { PRINTF( option, "[100M]========================================>\n" ); }
-		else                                { PRINTF( option, "[10M ]========================================>\n" ); }
+	if      ( eng->run.speed_sel[ 0 ] ) { PRINTF( option, "\n[1G  ]========================================>\n" ); }
+	else if ( eng->run.speed_sel[ 1 ] ) { PRINTF( option, "\n[100M]========================================>\n" ); }
+	else                                { PRINTF( option, "\n[10M ]========================================>\n" ); }
 
 		if ( !(option == FP_LOG) ) {
 			step = eng->io.rx_delay_scan.step;
@@ -2189,18 +2196,18 @@
 
 			PRINTF(option, "\n    ");
 			for (rx_d = eng->io.rx_delay_scan.begin; rx_d <= eng->io.rx_delay_scan.end; rx_d += step) {
-				tmp = abs(rx_d) / 10;
+			tmp = (abs(rx_d) >> 4) & 0xf;
 				if (tmp == 0) {
 					PRINTF(option, "0" );
 				} else {
-					PRINTF(option, "%1d", tmp);
+				PRINTF(option, "%1x", tmp);
 				}
 			}
 
 			PRINTF(option, "\n    ");
 			for (rx_d = eng->io.rx_delay_scan.begin;
 					rx_d <= eng->io.rx_delay_scan.end; rx_d += step) {
-				PRINTF(option, "%1d", (uint32_t)abs(rx_d) % 10);
+			PRINTF(option, "%1x", (uint32_t)abs(rx_d) & 0xf);
 			}
 
 			PRINTF(option, "\n    ");
@@ -2219,9 +2226,9 @@
 	void PrintIO_LineS(MAC_ENGINE *p_eng, uint8_t option)
 	{
 		if (p_eng->io.tx_delay_scan.orig == p_eng->io.Dly_out_selval) {
-			PRINTF( option, "%02d:-", p_eng->io.Dly_out_selval); 
+		PRINTF( option, "%02x:-", p_eng->io.Dly_out_selval); 
 		} else {
-			PRINTF( option, "%02d: ", p_eng->io.Dly_out_selval);
+		PRINTF( option, "%02x: ", p_eng->io.Dly_out_selval);
 		}	
 	} // End void PrintIO_LineS (MAC_ENGINE *eng, uint8_t option)
 
@@ -2230,14 +2237,18 @@
 	{
 		if ((p_eng->io.Dly_in_selval == p_eng->io.rx_delay_scan.orig) && 
 				(p_eng->io.Dly_out_selval == p_eng->io.tx_delay_scan.orig)) {
-			if (p_eng->io.result) {
+		if (1 == p_eng->io.result) {
 				PRINTF(option, "X");
+		} else if (2 == p_eng->io.result) {
+			PRINTF(option, "*");
 			} else {
 				PRINTF(option, "O");
 			}
 		} else {
-			if (p_eng->io.result) {
+		if (1 == p_eng->io.result) {
 				PRINTF(option, "x");
+		} else if (2 == p_eng->io.result) {
+			PRINTF(option, ".");
 			} else {
 				PRINTF(option, "o");
 			}
@@ -2267,6 +2278,7 @@
 		char       checkprd = 0;
 		char       looplast = 0;
 		char       checken = 0;
+		int ret= 0;
 
 		nt_log_func_name();
 
@@ -2316,24 +2328,22 @@
 			eng->dat.DMA_Base_Rx =
 					ZeroCopy_OFFSET + GET_DMA_BASE(eng, eng->run.loop_cnt + 1);
 			//[Check DES]--------------------
-			if (check_des(eng, eng->run.loop_cnt, checken)) {
+			ret = check_des(eng, eng->run.loop_cnt, checken);
+		if (ret) {
 				//descriptor error
+			eng->dat.Des_Num = eng->flg.CheckDesFail_DesNum + 1;
 #ifdef CheckRxBuf
-				eng->dat.Des_Num = eng->flg.CheckDesFail_DesNum + 1;
-				if ( checkprd ){
+			if (checkprd)
 					check_buf( eng, loop_checknum );
-				}
-				else{
+			else
 					check_buf( eng, ( eng->run.loop_max % loop_checknum ) );
-				}
 				eng->dat.Des_Num = eng->dat.Des_Num_Org;
 #endif
 
-				if (DbgPrn_DumpMACCnt){
+			if (DbgPrn_DumpMACCnt)
 					dump_mac_ROreg(eng);
-				}
 
-				return(1);
+			return ret;
 			}
 
 			//[Check Buf]--------------------
diff -Naur uboot/oem/ami/standalone/nettest/mactest.c uboot_new/oem/ami/standalone/nettest/mactest.c
--- uboot/oem/ami/standalone/nettest/mactest.c	2020-07-28 14:45:38.789078065 -0400
+++ uboot_new/oem/ami/standalone/nettest/mactest.c	2020-07-28 16:18:05.292791062 -0400
@@ -262,7 +262,17 @@
 	}
 	printf("\n");
 }
-
+static void print_legend(void)
+{
+	printf("Legend:\n");
+	printf("    o : OK\n");	
+	printf("    x : CRC error\n");
+	printf("    . : packet not found\n");
+	printf("    System default setting\n");
+	printf("    O : OK\n");	
+	printf("    X : CRC error\n");
+	printf("    * : packet not found\n");
+}
 static void print_usage(MAC_ENGINE *p_eng)
 {
 	if (MODE_DEDICATED == p_eng->arg.run_mode) {
@@ -280,7 +290,6 @@
 		printf("ncsitest <idx> <packet num> <channel num> <test mode>"
 				"<margin> <ctrl> <ARP num>\n");
 		print_arg_mac_idx(p_eng);
-		print_arg_mdio_idx(p_eng);
 		print_arg_package_num(p_eng);
 		print_arg_channel_num(p_eng);
 		print_arg_test_mode(p_eng);
@@ -1230,6 +1239,7 @@
 	for (speed = 0; speed < 3; speed++) {
 		p_eng->flg.print_en = 1;
 		p_eng->run.speed_idx = speed;
+		mac_set_scan_boundary(p_eng);
 		if (0 == p_eng->run.speed_sel[speed]) {
 			continue;
 		}
@@ -1396,21 +1406,19 @@
 {
 	/* dump env */
 	printf("===================\n");
-	printf("p_eng->env\n");
-	printf("ast2600 = %d\n", p_eng->env.ast2600);
-	printf("ast2500 = %d\n", p_eng->env.ast2500);
-	printf("mac_num = %d\n", p_eng->env.mac_num);
-	printf("is_new_mdio_reg = %d %d %d %d\n",
+	printf("ast2600 compatible = %d\n", p_eng->env.ast2600);
+	printf("ast2500 compatible = %d\n", p_eng->env.ast2500);
+	printf("valid MAC number = %d\n", p_eng->env.mac_num);
+	printf("use new MDIO register = %d %d %d %d\n",
 			p_eng->env.is_new_mdio_reg[0],
 			p_eng->env.is_new_mdio_reg[1],
 			p_eng->env.is_new_mdio_reg[2],
 			p_eng->env.is_new_mdio_reg[3]);
-	printf("is_1g_valid = %d %d %d %d\n",
+	printf("1G compatible = %d %d %d %d\n",
 			p_eng->env.is_1g_valid[0],
 			p_eng->env.is_1g_valid[1],
 			p_eng->env.is_1g_valid[2],
 			p_eng->env.is_1g_valid[3]);
-	printf("at_least_1g_valid = %d\n", p_eng->env.at_least_1g_valid);
 	printf("===================\n");
 
 
@@ -1458,10 +1466,10 @@
 	disable_wdt(&mac_eng);
 
 	mac_set_addr(&mac_eng);
-	if (mac_eng.arg.ctrl.b.mac_int_loopback)
+	if (mac_eng.arg.ctrl.b.mac_int_loopback) {
 		mac_set_interal_loopback(&mac_eng);
+	}
 
-	if (mac_eng.arg.run_mode == MODE_DEDICATED)
 		scu_set_pinmux(&mac_eng);
 
 	scu_disable_mac(&mac_eng);
@@ -1483,7 +1491,8 @@
 	//------------------------------
 	// [Start] The loop of different speed
 	//------------------------------
+	print_legend();
 	test_start(&mac_eng, &phy_eng);
 
-	return(finish_check(&mac_eng, 0));
+	return 0;
 }
diff -Naur uboot/oem/ami/standalone/nettest/ncsi.c uboot_new/oem/ami/standalone/nettest/ncsi.c
--- uboot/oem/ami/standalone/nettest/ncsi.c	2020-07-28 14:45:38.789078065 -0400
+++ uboot_new/oem/ami/standalone/nettest/ncsi.c	2020-07-28 16:18:05.292791062 -0400
@@ -216,6 +216,66 @@
 	eng->dat.Payload_Checksum_NCSI = SWAP_4B_BEDN(~(CheckSum) + 1); //2's complement
 }
 
+/**
+ * @brief	check error mask in RX descriptor
+ * @param	rx_desc0	RX descript[0]
+*/
+static int check_rx_desc_err(MAC_ENGINE *p_eng, uint32_t rx_desc0)
+{
+	uint8_t prefix[8] = "[RxDes]";
+
+	if (rx_desc0 & RXDES_EM_ALL) {
+#ifdef CheckRxErr
+		if (rx_desc0 & RXDES_EM_RXERR) {
+			PRINTF(STD_OUT, "%s Error RxErr        %08x\n", prefix,
+			       rx_desc0);
+			p_eng->dat.NCSI_RxEr = 1;
+		}
+#endif
+
+#ifdef CheckCRC
+		if (rx_desc0 & RXDES_EM_CRC) {
+			PRINTF(STD_OUT, "%s Error CRC          %08x\n", prefix,
+			       rx_desc0);
+			FindErr_Des(p_eng, Des_Flag_CRC);
+		}
+#endif
+
+#ifdef CheckFTL
+		if (rx_desc0 & RXDES_EM_FTL) {
+			PRINTF(STD_OUT, "%s Error FTL          %08x\n", prefix,
+			       rx_desc0);
+			FindErr_Des(p_eng, Des_Flag_FTL);
+		}
+#endif
+
+#ifdef CheckRunt
+		if (rx_desc0 & RXDES_EM_RUNT) {
+			PRINTF(STD_OUT, "%s Error Runt         %08x\n", prefix,
+			       rx_desc0);
+			FindErr_Des(p_eng, Des_Flag_Runt);
+		}
+#endif
+
+#ifdef CheckOddNibble
+		if (rx_desc0 & RXDES_EM_ODD_NB) {
+			PRINTF(STD_OUT, "%s Odd Nibble         %08x\n", prefix,
+			       rx_desc0);
+			FindErr_Des(p_eng, Des_Flag_OddNibble);
+		}
+#endif
+
+#ifdef CheckRxFIFOFull
+		if (rx_desc0 & RXDES_EM_FIFO_FULL) {
+			PRINTF(STD_OUT, "%s Error Rx FIFO Full %08x\n", prefix,
+			       rx_desc0);
+			FindErr_Des(p_eng, Des_Flag_RxFIFOFull);
+		}
+#endif
+	}
+
+	return 0;
+}
 //------------------------------------------------------------
 // return 0: it is PASS
 // return 1: it is FAIL
@@ -245,50 +305,7 @@
 			}
 		} while( HWOwnRx( NCSI_RxDesDat ) );
 
-		if ( NCSI_RxDesDat & Check_ErrMask_ALL ) {
-#ifdef CheckRxErr
-			if ( NCSI_RxDesDat & Check_ErrMask_RxErr ) {
-				PRINTF( FP_LOG, "[RxDes] Error RxErr        %08x\n", NCSI_RxDesDat );
-				eng->dat.NCSI_RxEr = 1;
-				//				FindErr_Des( eng, Des_Flag_RxErr );
-			}
-#endif // End CheckRxErr
-
-#ifdef CheckCRC
-			if ( NCSI_RxDesDat & Check_ErrMask_CRC ) {
-				PRINTF( FP_LOG, "[RxDes] Error CRC          %08x\n", NCSI_RxDesDat );
-				FindErr_Des( eng, Des_Flag_CRC );
-			}
-#endif // End CheckCRC
-
-#ifdef CheckFTL
-			if ( NCSI_RxDesDat & Check_ErrMask_FTL ) {
-				PRINTF( FP_LOG, "[RxDes] Error FTL          %08x\n", NCSI_RxDesDat );
-				FindErr_Des( eng, Des_Flag_FTL );
-			}
-#endif // End CheckFTL
-
-#ifdef CheckRunt
-			if ( NCSI_RxDesDat & Check_ErrMask_Runt ) {
-				PRINTF( FP_LOG, "[RxDes] Error Runt         %08x\n", NCSI_RxDesDat );
-				FindErr_Des( eng, Des_Flag_Runt );
-			}
-#endif // End CheckRunt
-
-#ifdef CheckOddNibble
-			if ( NCSI_RxDesDat & Check_ErrMask_OddNibble ) {
-				PRINTF( FP_LOG, "[RxDes] Odd Nibble         %08x\n", NCSI_RxDesDat );
-				FindErr_Des( eng, Des_Flag_OddNibble );
-			}
-#endif // End CheckOddNibble
-
-#ifdef CheckRxFIFOFull
-			if ( NCSI_RxDesDat & Check_ErrMask_RxFIFOFull ) {
-				PRINTF( FP_LOG, "[RxDes] Error Rx FIFO Full %08x\n", NCSI_RxDesDat );
-				FindErr_Des( eng, Des_Flag_RxFIFOFull );
-			}
-#endif // End CheckRxFIFOFull
-		}
+		check_rx_desc_err(eng, NCSI_RxDesDat);
 
 		// Get point of RX DMA buffer
 		NCSI_RxDatBase = AT_BUF_MEMRW( Read_Mem_Des_NCSI_DD( eng->run.ncsi_rdes_base + 0x0C ) );//base for read/write
@@ -449,7 +466,7 @@
 		PRINTF( FP_LOG ,"[Frm-NCSI][Tx IID:%2d]\n", eng->ncsi_req.IID );
 	}
 
-#if 0
+#if 1
 	// Copy data to DMA buffer
 	for ( i = 0; i < dwsize; i++ )
 		Write_Mem_Dat_NCSI_DD( DMA_BASE + ( i << 2 ), SWAP_4B_LEDN_NCSI( eng->dat.NCSI_TxDWBUF[i] ) );
diff -Naur uboot/oem/ami/standalone/nettest/phy.c uboot_new/oem/ami/standalone/nettest/phy.c
--- uboot/oem/ami/standalone/nettest/phy.c	2020-07-28 14:45:38.789078065 -0400
+++ uboot_new/oem/ami/standalone/nettest/phy.c	2020-07-28 16:18:05.292791062 -0400
@@ -759,9 +759,11 @@
 	if ( DbgPrn_PHYName ){
 		printf("--->(%04x %04x)[Broadcom] %s\n", eng->phy.PHY_ID2, eng->phy.PHY_ID3, eng->phy.phy_name);
 	}
+	phy_Reset(eng);
 
 	eng->phy.PHY_00h = phy_read( eng, PHY_REG_BMCR );
 	eng->phy.PHY_09h = phy_read( eng, PHY_GBCR );
+	phy_write( eng, 0, eng->phy.PHY_00h & ~BIT(10));
 	phy_write( eng, 24, 0x7007 );//read reg 18h, shadow value 111
 	eng->phy.PHY_18h = phy_read( eng, 24 );
 	phy_write( eng, 28, 0x0c00 );//read reg 1Ch, shadow value 00011
@@ -871,7 +873,7 @@
 		printf("--->(%04x %04x)[Realtek] %s\n", eng->phy.PHY_ID2, eng->phy.PHY_ID3, eng->phy.phy_name);
 	}
 
-	eng->phy.RMIICK_IOMode = eng->phy.RMIICK_IOMode | PHY_Flag_RMIICK_IOMode_RTL8201E;
+        eng->phy.RMIICK_IOMode |= PHY_Flag_RMIICK_IOMode_RTL8201E;
 
 	phy_Reset( eng );
 
@@ -1550,7 +1552,7 @@
 		printf("--->(%04x %04x)[Realtek] %s\n", eng->phy.PHY_ID2, eng->phy.PHY_ID3, eng->phy.phy_name);
 	}
 
-	eng->phy.RMIICK_IOMode = eng->phy.RMIICK_IOMode | PHY_Flag_RMIICK_IOMode_RTL8201F;
+        eng->phy.RMIICK_IOMode |= PHY_Flag_RMIICK_IOMode_RTL8201F;
 
 	phy_write( eng, 31, 0x0007 );
 	eng->phy.PHY_10h = phy_read( eng, 16 );
diff -Naur uboot/oem/ami/standalone/nettest/stress.c uboot_new/oem/ami/standalone/nettest/stress.c
--- uboot/oem/ami/standalone/nettest/stress.c	2020-07-28 14:45:38.789078065 -0400
+++ uboot_new/oem/ami/standalone/nettest/stress.c	2020-07-28 16:18:05.296791208 -0400
@@ -23,7 +23,7 @@
 
 DECLARE_GLOBAL_DATA_PTR;
 
-#define DRAM_MapAdr	81000000
+#define DRAM_BASE	0x80000000
 #define TIMEOUT_DRAM	5000000
 
 /* ------------------------------------------------------------------------- */
@@ -86,18 +86,12 @@
 /* ------------------------------------------------------------------------- */
 int MMCTest(void)
 {
-	unsigned int pattern = 0;
+	unsigned int pattern;
 
-#if 1
 	pattern = rand();
-#else
-	pattern = readl( 0x1E6E2078 );
-#endif
-
-	printf("Pattern = %08X : ",pattern);
-
-	writel((DRAM_MapAdr | 0x7fffff), 0x1E6E0074);
 	writel(pattern, 0x1E6E007C);
+	printf("Pattern = %08X : ",pattern);
+  
 
 	if(!MMCTestBurst(0))    return(0);
 	if(!MMCTestBurst(1))    return(0);
@@ -121,41 +115,77 @@
 
 unsigned long strtoul_ext(char *string, char **endPtr, int base);
 /* ------------------------------------------------------------------------- */
+static void print_usage(void)
+{
+	printf("\nASPEED DRAM BIST\n\n");
+	printf("Usage: dramtest <count> <block> <length>\n\n");
+	printf("count:  how many iterations to run (mandatory, in decimal)\n");
+	printf("        0: infinite loop.\n");
+	printf("block:  index of the address block to test "
+			"(optional, in decimal, default: 0)\n");
+	printf("        0: [8000_0000, 8400_0000)\n");
+	printf("        1: [8400_0000, 8800_0000)\n");
+	printf("        2: [8800_0000, 8C00_0000)\n");
+	printf("        n: [8000_0000 + n*64MB, 8000_0000 + (n+1)*64MB)\n");
+	printf("           where n = [0, 31]\n");
+	printf("length: size to test (optional, in hex, default: 0x10000)\n");
+	printf("        0x0: test the whole memory block 64MB\n");
+	printf("        0x1: test the first 16 Bytes of the memory block\n");
+	printf("        0x2: test the first 2*16 Bytes of the memory block\n");
+	printf("        n  : test the first n*16 Bytes of the memory block\n");
+	printf("             where n = [0x00_0001, 0x3F_FFFF]\n");
+	printf("\n\n");
+}
 int dram_stress_function(int argc, char * const argv[], char mode)
 {
-	unsigned int PassCnt = 0;
-	ulong Testcounter = 0;
-	int ret = 1;
-	char *stop_at = NULL;;
-
-	printf("**************************************************** \n");       
-	printf("***            AST2600 Stress DRAM               *** \n");
-	printf("***            20191104 for u-boot               *** \n");
-	printf("**************************************************** \n"); 
-	printf("\n"); 
+	u32 PassCnt = 0;
+	unsigned long Testcounter = 0;
+	unsigned long block = 0;
+	unsigned long length = 0x10000;
+	int ret;
 
-	if ( argc != 2 ){
+	if (argc < 2) {
 		ret = 0;
-		return ( ret );
-	} else {
-		Testcounter = (unsigned int) strtoul_ext(argv[1], &stop_at, 10);
+		goto cmd_err;
 	}
 
-	printf("executing stress dram\n");
-	writel(0xFC600309, 0x1E6E0000);
+	ret = CMD_RET_USAGE;
+	switch (argc) {
+	case 4:
+		if (strict_strtoul(argv[3], 16, &length) < 0)
+			goto cmd_err;
+	case 3:
+		if (strict_strtoul(argv[2], 10, &block) < 0)
+			goto cmd_err;
+	case 2:
+		if (strict_strtoul(argv[1], 10, &Testcounter) < 0)
+			goto cmd_err;
+		break;
+	}
 
-	while( ( Testcounter > PassCnt ) || ( Testcounter == 0 ) ){
-		if( !MMCTest() ) {
-			printf("FAIL...%d/%ld\n", PassCnt, Testcounter);
-			ret = 0;
+	printf("Test range: 0x%08lx - 0x%08lx\n", DRAM_BASE + (block << 26),
+	       DRAM_BASE + (block << 26) + (length << 4));
 
+	ret = 1;
+	writel(0xFC600309, 0x1E6E0000);
+	while ((Testcounter > PassCnt) || (Testcounter == 0)) {
+		clrsetbits_le32(0x1E6E0074, GENMASK(30, 4),
+				(block << 26) | (length << 4));
+		if (!MMCTest()) {
+			printf("FAIL %d/%ld (fail DQ 0x%08x)\n", PassCnt,
+			       Testcounter, readl(0x1E6E0078));
+			ret = 0;
 			break;
 		} else {
 			PassCnt++;
 			printf("Pass %d/%ld\n", PassCnt, Testcounter);
 		}
-	} // End while()
+	}
+
+	return (ret);
 
-	return( ret );
+cmd_err:	
+	print_usage();
+	return (ret);
 }
 
diff -Naur uboot/oem/ami/standalone/nettest/swfunc.h uboot_new/oem/ami/standalone/nettest/swfunc.h
--- uboot/oem/ami/standalone/nettest/swfunc.h	2020-07-28 14:45:38.789078065 -0400
+++ uboot_new/oem/ami/standalone/nettest/swfunc.h	2020-07-28 16:18:05.292791062 -0400
@@ -43,7 +43,7 @@
 #define   DbgPrn_PHYInit                         0
 #define   DbgPrn_PHYName                         0
 #define   DbgPrn_DumpMACCnt                      0
-#define   DbgPrn_Info                            1
+#define   DbgPrn_Info                            0
 #define   DbgPrn_FRAME_LEN                       0
 
 #ifdef DBG_LOG_FUNC_NAME
@@ -69,36 +69,17 @@
 #define CheckTPktLost
 #define CheckRxBuf
 
-#ifdef CheckRxErr
-#define Check_ErrMask_RxErr                    0x00040000 //bit18
-#else
-#define Check_ErrMask_RxErr                    0x00000000
-#endif
-#ifdef CheckCRC
-#define Check_ErrMask_CRC                      0x00080000 //bit19
-#else
-#define Check_ErrMask_CRC                      0x00000000
-#endif
-#ifdef CheckFTL
-#define Check_ErrMask_FTL                      0x00100000 //bit20
-#else
-#define Check_ErrMask_FTL                      0x00000000
-#endif
-#ifdef CheckRunt
-#define Check_ErrMask_Runt                     0x00200000 //bit21
-#else
-#define Check_ErrMask_Runt                     0x00000000
-#endif
-#ifdef CheckOddNibble
-#define Check_ErrMask_OddNibble                0x00400000 //bit22
-#else
-#define Check_ErrMask_OddNibble                0x00000000
-#endif
-#ifdef CheckRxFIFOFull
-#define Check_ErrMask_RxFIFOFull               0x00800000 //bit23
-#else
-#define Check_ErrMask_RxFIFOFull               0x00000000
-#endif
-#define Check_ErrMask_ALL                        ( Check_ErrMask_RxErr | Check_ErrMask_CRC | Check_ErrMask_FTL | Check_ErrMask_Runt | Check_ErrMask_OddNibble | Check_ErrMask_RxFIFOFull )
+
+
+/* error mask of the RX descriptor */
+#define RXDES_EM_RXERR			BIT(18)
+#define RXDES_EM_CRC			BIT(19)
+#define RXDES_EM_FTL			BIT(20)
+#define RXDES_EM_RUNT			BIT(21)
+#define RXDES_EM_ODD_NB			BIT(22)
+#define RXDES_EM_FIFO_FULL		BIT(23)
+#define RXDES_EM_ALL                                                           \
+	(RXDES_EM_RXERR | RXDES_EM_CRC | RXDES_EM_FTL | RXDES_EM_RUNT |        \
+	 RXDES_EM_ODD_NB | RXDES_EM_FIFO_FULL)
 
 #endif // SWFUNC_H
