diff -Naur uboot/cmd/aes.c uboot.new/cmd/aes.c
--- uboot/cmd/aes.c	2019-07-23 10:57:53.000000000 +0800
+++ uboot.new/cmd/aes.c	2020-06-23 09:52:34.385484426 +0800
@@ -2,7 +2,7 @@
 /*
  * Copyright (C) 2014 Marek Vasut <marex@denx.de>
  *
- * Command for en/de-crypting block of memory with AES-128-CBC cipher.
+ * Command for en/de-crypting block of memory with AES-[128/192/256]-CBC  cipher.
  */
 
 #include <common.h>
@@ -13,6 +13,18 @@
 #include <asm/byteorder.h>
 #include <linux/compiler.h>
 
+u32 aes_get_key_len(char *command)
+{
+   u32 key_len = AES128_KEY_LENGTH;
+
+   if (!strcmp(command, "aes.192"))
+           key_len = AES192_KEY_LENGTH;
+   else if (!strcmp(command, "aes.256"))
+           key_len = AES256_KEY_LENGTH;
+
+   return key_len;
+}
+
 /**
  * do_aes() - Handle the "aes" command-line command
  * @cmdtp:	Command data struct pointer
@@ -23,17 +35,19 @@
  * Returns zero on success, CMD_RET_USAGE in case of misuse and negative
  * on error.
  */
-static int do_aes(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+int do_aes(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
 {
 	uint32_t key_addr, iv_addr, src_addr, dst_addr, len;
 	uint8_t *key_ptr, *iv_ptr, *src_ptr, *dst_ptr;
-	uint8_t key_exp[AES_EXPAND_KEY_LENGTH];
-	uint32_t aes_blocks;
+    u8 key_exp[AES256_EXPAND_KEY_LENGTH];
+    u32 aes_blocks, key_len;
 	int enc;
 
 	if (argc != 7)
 		return CMD_RET_USAGE;
 
+	key_len = aes_get_key_len(argv[0]);
+
 	if (!strncmp(argv[1], "enc", 3))
 		enc = 1;
 	else if (!strncmp(argv[1], "dec", 3))
@@ -53,17 +67,17 @@
 	dst_ptr = (uint8_t *)dst_addr;
 
 	/* First we expand the key. */
-	aes_expand_key(key_ptr, key_exp);
+	aes_expand_key(key_ptr, key_len, key_exp);
 
 	/* Calculate the number of AES blocks to encrypt. */
-	aes_blocks = DIV_ROUND_UP(len, AES_KEY_LENGTH);
+	aes_blocks = DIV_ROUND_UP(len, AES_BLOCK_LENGTH);
 
 	if (enc)
-		aes_cbc_encrypt_blocks(key_exp, iv_ptr, src_ptr, dst_ptr,
-				       aes_blocks);
+		aes_cbc_encrypt_blocks(key_len, key_exp, iv_ptr, src_ptr,
+				       dst_ptr, aes_blocks);
 	else
-		aes_cbc_decrypt_blocks(key_exp, iv_ptr, src_ptr, dst_ptr,
-				       aes_blocks);
+		aes_cbc_decrypt_blocks(key_len, key_exp, iv_ptr, src_ptr,
+				       dst_ptr, aes_blocks);
 
 	return 0;
 }
@@ -71,13 +85,13 @@
 /***************************************************/
 #ifdef CONFIG_SYS_LONGHELP
 static char aes_help_text[] =
-	"enc key iv src dst len - Encrypt block of data $len bytes long\n"
+	"[.128,.192,.256] enc key iv src dst len - Encrypt block of data $len bytes long\n"
 	"                             at address $src using a key at address\n"
 	"                             $key with initialization vector at address\n"
 	"                             $iv. Store the result at address $dst.\n"
 	"                             The $len size must be multiple of 16 bytes.\n"
 	"                             The $key and $iv must be 16 bytes long.\n"
-	"aes dec key iv src dst len - Decrypt block of data $len bytes long\n"
+	"[.128,.192,.256] dec key iv src dst len - Decrypt block of data $len bytes long\n"
 	"                             at address $src using a key at address\n"
 	"                             $key with initialization vector at address\n"
 	"                             $iv. Store the result at address $dst.\n"
@@ -87,6 +101,6 @@
 
 U_BOOT_CMD(
 	aes, 7, 1, do_aes,
-	"AES 128 CBC encryption",
+	"AES 128/192/256 CBC encryption",
 	aes_help_text
 );
diff -Naur uboot/cmd/otp.c uboot.new/cmd/otp.c
--- uboot/cmd/otp.c	2019-07-23 10:57:53.000000000 +0800
+++ uboot.new/cmd/otp.c	2020-06-23 09:52:34.089491123 +0800
@@ -8,14 +8,14 @@
  *  along with this program; if not, write to the Free Software
  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
-
+#include <stdlib.h>
 #include <common.h>
 #include <console.h>
 #include <bootretry.h>
 #include <cli.h>
 #include <command.h>
 #include <console.h>
-
+#include <malloc.h>
 #include <inttypes.h>
 #include <mapmem.h>
 #include <asm/io.h>
@@ -23,14 +23,32 @@
 
 DECLARE_GLOBAL_DATA_PTR;
 
-#define OTP_PASSWD	0x349fe38a
-#define RETRY		3
-#define MODE_CONF	1
-#define MODE_STRAP	2
-#define MODE_DATA	3
-#define MODE_ALL	4
+#define OTP_PASSWD			0x349fe38a
+#define RETRY				3
+#define OTP_REGION_STRAP		BIT(0)
+#define OTP_REGION_CONF			BIT(1)
+#define OTP_REGION_DATA			BIT(2)
+
+#define OTP_USAGE			-1
+#define OTP_FAILURE			-2
+#define OTP_SUCCESS			0
+
+#define OTP_PROG_SKIP			1
+
+#define OTP_KEY_TYPE_RSA		1
+#define OTP_KEY_TYPE_AES		2
+#define OTP_KEY_TYPE_VAULT		3
+#define OTP_KEY_TYPE_HMAC		4
+
+
+#define OTP_REG_RESERVED		-1
+#define OTP_REG_VALUE			-2
+#define OTP_REG_VALID_BIT		-3
+
+#define PBSTR "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"
+#define PBWIDTH 60
 
-struct otpstrap {
+struct otpstrap_status {
 	int value;
 	int option_array[7];
 	int remain_times;
@@ -38,17 +56,497 @@
 	int protected;
 };
 
-static int otp_read_data(uint32_t offset, uint32_t *data)
+struct otpconf_parse {
+	int dw_offset;
+	int bit;
+	int length;
+	int value;
+	int keep;
+	char status[80];
+};
+
+struct otpstrap_info {
+	uint32_t bit_offset;
+	uint32_t length;
+	int value;
+	char information[80];
+};
+
+struct otpconf_info {
+	uint32_t dw_offset;
+	uint32_t bit_offset;
+	uint32_t length;
+	int value;
+	char information[80];
+};
+
+struct otpkey_type {
+	int value;
+	int key_type;
+	int need_id;
+	char information[110];
+};
+
+struct otp_info_cb {
+	int version;
+	struct otpstrap_info *strap_info;
+	int strap_info_len;
+	struct otpconf_info *conf_info;
+	int conf_info_len;
+	struct otpkey_type *key_info;
+	int key_info_len;
+};
+
+void printProgress(int numerator, int denominator, char *format, ...)
+{
+	int val = numerator * 100 / denominator;
+	int lpad = numerator * PBWIDTH / denominator;
+	int rpad = PBWIDTH - lpad;
+	char buffer[256];
+	va_list aptr;
+
+	va_start(aptr, format);
+	vsprintf(buffer, format, aptr);
+	va_end(aptr);
+
+	printf("\r%3d%% [%.*s%*s] %s", val, lpad, PBSTR, rpad, "", buffer);
+	if (numerator == denominator)
+		printf("\n");
+}
+
+static struct otp_info_cb info_cb;
+
+struct otpstrap_info a0_strap_info[] = {
+	{ 0, 1, 0, "Disable secure boot" },
+	{ 0, 1, 1, "Enable secure boot"	},
+	{ 1, 1, 0, "Disable boot from eMMC" },
+	{ 1, 1, 1, "Enable boot from eMMC" },
+	{ 2, 1, 0, "Disable Boot from debug SPI" },
+	{ 2, 1, 1, "Enable Boot from debug SPI" },
+	{ 3, 1, 0, "Enable ARM CM3" },
+	{ 3, 1, 1, "Disable ARM CM3" },
+	{ 4, 1, 0, "No VGA BIOS ROM, VGA BIOS is merged in the system BIOS" },
+	{ 4, 1, 1, "Enable dedicated VGA BIOS ROM" },
+	{ 5, 1, 0, "MAC 1 : RMII/NCSI" },
+	{ 5, 1, 1, "MAC 1 : RGMII" },
+	{ 6, 1, 0, "MAC 2 : RMII/NCSI" },
+	{ 6, 1, 1, "MAC 2 : RGMII" },
+	{ 7, 3, 0, "CPU Frequency : 1GHz" },
+	{ 7, 3, 1, "CPU Frequency : 800MHz" },
+	{ 7, 3, 2, "CPU Frequency : 1.2GHz" },
+	{ 7, 3, 3, "CPU Frequency : 1.4GHz" },
+	{ 10, 2, 0, "HCLK ratio AXI:AHB = 2:1" },
+	{ 10, 2, 1, "HCLK ratio AXI:AHB = 2:1" },
+	{ 10, 2, 2, "HCLK ratio AXI:AHB = 3:1" },
+	{ 10, 2, 3, "HCLK ratio AXI:AHB = 4:1" },
+	{ 12, 2, 0, "VGA memory size : 8MB" },
+	{ 12, 2, 1, "VGA memory size : 16MB" },
+	{ 12, 2, 2, "VGA memory size : 32MB" },
+	{ 12, 2, 3, "VGA memory size : 64MB" },
+	{ 14, 3, OTP_REG_RESERVED, "" },
+	{ 17, 1, 0, "VGA class code : Class Code for video device" },
+	{ 17, 1, 1, "VGA class code : Class Code for VGA device" },
+	{ 18, 1, 0, "Enable debug interfaces 0" },
+	{ 18, 1, 1, "Disable debug interfaces 0" },
+	{ 19, 1, 0, "Boot from emmc mode : High eMMC speed" },
+	{ 19, 1, 1, "Boot from emmc mode : Normal eMMC speed" },
+	{ 20, 1, 0, "Enable Pcie EHCI device" },
+	{ 20, 1, 1, "Disable Pcie EHCI device" },
+	{ 21, 1, 0, "Enable VGA XDMA function" },
+	{ 21, 1, 1, "Disable VGA XDMA function" },
+	{ 22, 1, 0, "Normal BMC mode" },
+	{ 22, 1, 1, "Disable dedicated BMC functions for non-BMC application" },
+	{ 23, 1, 0, "SSPRST# pin is for secondary processor dedicated reset pin" },
+	{ 23, 1, 1, "SSPRST# pin is for PCIE root complex dedicated reset pin" },
+	{ 24, 1, 0, "DRAM types : DDR4" },
+	{ 24, 1, 1, "DRAM types : DDR3" },
+	{ 25, 5, OTP_REG_RESERVED, "" },
+	{ 30, 2, OTP_REG_RESERVED, "" },
+	{ 32, 1, 0, "MAC 3 : RMII/NCSI" },
+	{ 32, 1, 1, "MAC 3 : RGMII" },
+	{ 33, 1, 0, "MAC 4 : RMII/NCSI" },
+	{ 33, 1, 1, "MAC 4 : RGMII" },
+	{ 34, 1, 0, "SuperIO configuration address : 0x2E" },
+	{ 34, 1, 1, "SuperIO configuration address : 0x4E" },
+	{ 35, 1, 0, "Enable LPC to decode SuperIO" },
+	{ 35, 1, 1, "Disable LPC to decode SuperIO" },
+	{ 36, 1, 0, "Enable debug interfaces 1" },
+	{ 36, 1, 1, "Disable debug interfaces 1" },
+	{ 37, 1, 0, "Disable ACPI function" },
+	{ 37, 1, 1, "Enable ACPI function" },
+	{ 38, 1, 0, "Enable eSPI mode" },
+	{ 38, 1, 1, "Enable LPC mode" },
+	{ 39, 1, 0, "Enable SAFS mode" },
+	{ 39, 1, 1, "Enable SAFS mode" },
+	{ 40, 2, OTP_REG_RESERVED, "" },
+	{ 42, 1, 0, "Disable boot SPI 3B/4B address mode auto detection" },
+	{ 42, 1, 1, "Enable boot SPI 3B/4B address mode auto detection" },
+	{ 43, 1, 0, "Disable boot SPI ABR" },
+	{ 43, 1, 1, "Enable boot SPI ABR" },
+	{ 44, 1, 0, "Boot SPI ABR mode : dual SPI flash" },
+	{ 44, 1, 1, "Boot SPI ABR mode : single SPI flash" },
+	{ 45, 3, 0, "Boot SPI flash size : no define size" },
+	{ 45, 3, 1, "Boot SPI flash size : 2MB" },
+	{ 45, 3, 2, "Boot SPI flash size : 4MB" },
+	{ 45, 3, 3, "Boot SPI flash size : 8MB" },
+	{ 45, 3, 4, "Boot SPI flash size : 16MB" },
+	{ 45, 3, 5, "Boot SPI flash size : 32MB" },
+	{ 45, 3, 6, "Boot SPI flash size : 64MB" },
+	{ 45, 3, 7, "Boot SPI flash size : 128MB" },
+	{ 48, 1, 0, "Disable host SPI ABR" },
+	{ 48, 1, 1, "Enable host SPI ABR" },
+	{ 49, 1, 0, "Disable host SPI ABR mode select pin" },
+	{ 49, 1, 1, "Enable host SPI ABR mode select pin" },
+	{ 50, 1, 0, "Host SPI ABR mode : dual SPI flash" },
+	{ 50, 1, 1, "Host SPI ABR mode : single SPI flash" },
+	{ 51, 3, 0, "Host SPI flash size : no define size" },
+	{ 51, 3, 1, "Host SPI flash size : 2MB" },
+	{ 51, 3, 2, "Host SPI flash size : 4MB" },
+	{ 51, 3, 3, "Host SPI flash size : 8MB" },
+	{ 51, 3, 4, "Host SPI flash size : 16MB" },
+	{ 51, 3, 5, "Host SPI flash size : 32MB" },
+	{ 51, 3, 6, "Host SPI flash size : 64MB" },
+	{ 51, 3, 7, "Host SPI flash size : 128MB" },
+	{ 54, 1, 0, "Disable boot SPI auxiliary control pins" },
+	{ 54, 1, 1, "Enable boot SPI auxiliary control pins" },
+	{ 55, 2, 0, "Boot SPI CRTM size : disable CRTM" },
+	{ 55, 2, 1, "Boot SPI CRTM size : 256KB" },
+	{ 55, 2, 2, "Boot SPI CRTM size : 512KB" },
+	{ 55, 2, 3, "Boot SPI CRTM size : 1MB" },
+	{ 57, 2, 0, "Host SPI CRTM size : disable CRTM" },
+	{ 57, 2, 1, "Host SPI CRTM size : 256KB" },
+	{ 57, 2, 2, "Host SPI CRTM size : 512KB" },
+	{ 57, 2, 3, "Host SPI CRTM size : 1MB" },
+	{ 59, 1, 0, "Disable host SPI auxiliary control pins" },
+	{ 59, 1, 1, "Enable host SPI auxiliary control pins" },
+	{ 60, 1, 0, "Disable GPIO pass through" },
+	{ 60, 1, 1, "Enable GPIO pass through" },
+	{ 61, 1, 0, "Enable low security secure boot key" },
+	{ 61, 1, 1, "Disable low security secure boot key" },
+	{ 62, 1, 0, "Disable dedicate GPIO strap pins" },
+	{ 62, 1, 1, "Enable dedicate GPIO strap pins" },
+	{ 63, 1, OTP_REG_RESERVED, "" }
+};
+
+struct otpstrap_info a1_strap_info[] = {
+	{ 0, 1, 0, "Disable secure boot" },
+	{ 0, 1, 1, "Enable secure boot"	},
+	{ 1, 1, 0, "Disable boot from eMMC" },
+	{ 1, 1, 1, "Enable boot from eMMC" },
+	{ 2, 1, 0, "Disable Boot from debug SPI" },
+	{ 2, 1, 1, "Enable Boot from debug SPI" },
+	{ 3, 1, 0, "Enable ARM CM3" },
+	{ 3, 1, 1, "Disable ARM CM3" },
+	{ 4, 1, 0, "No VGA BIOS ROM, VGA BIOS is merged in the system BIOS" },
+	{ 4, 1, 1, "Enable dedicated VGA BIOS ROM" },
+	{ 5, 1, 0, "MAC 1 : RMII/NCSI" },
+	{ 5, 1, 1, "MAC 1 : RGMII" },
+	{ 6, 1, 0, "MAC 2 : RMII/NCSI" },
+	{ 6, 1, 1, "MAC 2 : RGMII" },
+	{ 7, 3, 0, "CPU Frequency : 1GHz" },
+	{ 7, 3, 1, "CPU Frequency : 800MHz" },
+	{ 7, 3, 2, "CPU Frequency : 1.2GHz" },
+	{ 7, 3, 3, "CPU Frequency : 1.4GHz" },
+	{ 10, 2, 0, "HCLK ratio AXI:AHB = 2:1" },
+	{ 10, 2, 1, "HCLK ratio AXI:AHB = 2:1" },
+	{ 10, 2, 2, "HCLK ratio AXI:AHB = 3:1" },
+	{ 10, 2, 3, "HCLK ratio AXI:AHB = 4:1" },
+	{ 12, 2, 0, "VGA memory size : 8MB" },
+	{ 12, 2, 1, "VGA memory size : 16MB" },
+	{ 12, 2, 2, "VGA memory size : 32MB" },
+	{ 12, 2, 3, "VGA memory size : 64MB" },
+	{ 14, 3, OTP_REG_RESERVED, "" },
+	{ 17, 1, 0, "VGA class code : Class Code for video device" },
+	{ 17, 1, 1, "VGA class code : Class Code for VGA device" },
+	{ 18, 1, 0, "Enable debug interfaces 0" },
+	{ 18, 1, 1, "Disable debug interfaces 0" },
+	{ 19, 1, 0, "Boot from emmc mode : High eMMC speed" },
+	{ 19, 1, 1, "Boot from emmc mode : Normal eMMC speed" },
+	{ 20, 1, 0, "Disable Pcie EHCI device" },
+	{ 20, 1, 1, "Enable Pcie EHCI device" },
+	{ 21, 1, 0, "Enable VGA XDMA function" },
+	{ 21, 1, 1, "Disable VGA XDMA function" },
+	{ 22, 1, 0, "Normal BMC mode" },
+	{ 22, 1, 1, "Disable dedicated BMC functions for non-BMC application" },
+	{ 23, 1, 0, "SSPRST# pin is for secondary processor dedicated reset pin" },
+	{ 23, 1, 1, "SSPRST# pin is for PCIE root complex dedicated reset pin" },
+	{ 24, 1, 0, "Enable watchdog to reset full chip" },
+	{ 24, 1, 1, "Disable watchdog to reset full chip" },
+	{ 25, 5, OTP_REG_RESERVED, "" },
+	{ 30, 2, OTP_REG_RESERVED, "" },
+	{ 32, 1, 0, "MAC 3 : RMII/NCSI" },
+	{ 32, 1, 1, "MAC 3 : RGMII" },
+	{ 33, 1, 0, "MAC 4 : RMII/NCSI" },
+	{ 33, 1, 1, "MAC 4 : RGMII" },
+	{ 34, 1, 0, "SuperIO configuration address : 0x2E" },
+	{ 34, 1, 1, "SuperIO configuration address : 0x4E" },
+	{ 35, 1, 0, "Enable LPC to decode SuperIO" },
+	{ 35, 1, 1, "Disable LPC to decode SuperIO" },
+	{ 36, 1, 0, "Enable debug interfaces 1" },
+	{ 36, 1, 1, "Disable debug interfaces 1" },
+	{ 37, 1, 0, "Disable ACPI function" },
+	{ 37, 1, 1, "Enable ACPI function" },
+	{ 38, 1, 0, "Enable eSPI mode" },
+	{ 38, 1, 1, "Enable LPC mode" },
+	{ 39, 1, 0, "Enable SAFS mode" },
+	{ 39, 1, 1, "Enable SAFS mode" },
+	{ 40, 2, OTP_REG_RESERVED, "" },
+	{ 42, 1, 0, "Disable boot SPI 3B/4B address mode auto detection" },
+	{ 42, 1, 1, "Enable boot SPI 3B/4B address mode auto detection" },
+	{ 43, 1, 0, "Disable boot SPI ABR" },
+	{ 43, 1, 1, "Enable boot SPI ABR" },
+	{ 44, 1, 0, "Boot SPI ABR mode : dual SPI flash" },
+	{ 44, 1, 1, "Boot SPI ABR mode : single SPI flash" },
+	{ 45, 3, 0, "Boot SPI flash size : no define size" },
+	{ 45, 3, 1, "Boot SPI flash size : 2MB" },
+	{ 45, 3, 2, "Boot SPI flash size : 4MB" },
+	{ 45, 3, 3, "Boot SPI flash size : 8MB" },
+	{ 45, 3, 4, "Boot SPI flash size : 16MB" },
+	{ 45, 3, 5, "Boot SPI flash size : 32MB" },
+	{ 45, 3, 6, "Boot SPI flash size : 64MB" },
+	{ 45, 3, 7, "Boot SPI flash size : 128MB" },
+	{ 48, 1, 0, "Disable host SPI ABR" },
+	{ 48, 1, 1, "Enable host SPI ABR" },
+	{ 49, 1, 0, "Disable host SPI ABR mode select pin" },
+	{ 49, 1, 1, "Enable host SPI ABR mode select pin" },
+	{ 50, 1, 0, "Host SPI ABR mode : dual SPI flash" },
+	{ 50, 1, 1, "Host SPI ABR mode : single SPI flash" },
+	{ 51, 3, 0, "Host SPI flash size : no define size" },
+	{ 51, 3, 1, "Host SPI flash size : 2MB" },
+	{ 51, 3, 2, "Host SPI flash size : 4MB" },
+	{ 51, 3, 3, "Host SPI flash size : 8MB" },
+	{ 51, 3, 4, "Host SPI flash size : 16MB" },
+	{ 51, 3, 5, "Host SPI flash size : 32MB" },
+	{ 51, 3, 6, "Host SPI flash size : 64MB" },
+	{ 51, 3, 7, "Host SPI flash size : 128MB" },
+	{ 54, 1, 0, "Disable boot SPI auxiliary control pins" },
+	{ 54, 1, 1, "Enable boot SPI auxiliary control pins" },
+	{ 55, 2, 0, "Boot SPI CRTM size : disable CRTM" },
+	{ 55, 2, 1, "Boot SPI CRTM size : 256KB" },
+	{ 55, 2, 2, "Boot SPI CRTM size : 512KB" },
+	{ 55, 2, 3, "Boot SPI CRTM size : 1MB" },
+	{ 57, 2, 0, "Host SPI CRTM size : disable CRTM" },
+	{ 57, 2, 1, "Host SPI CRTM size : 256KB" },
+	{ 57, 2, 2, "Host SPI CRTM size : 512KB" },
+	{ 57, 2, 3, "Host SPI CRTM size : 1MB" },
+	{ 59, 1, 0, "Disable host SPI auxiliary control pins" },
+	{ 59, 1, 1, "Enable host SPI auxiliary control pins" },
+	{ 60, 1, 0, "Disable GPIO pass through" },
+	{ 60, 1, 1, "Enable GPIO pass through" },
+	{ 61, 1, 0, "Enable low security secure boot key" },
+	{ 61, 1, 1, "Disable low security secure boot key" },
+	{ 62, 1, 0, "Disable dedicate GPIO strap pins" },
+	{ 62, 1, 1, "Enable dedicate GPIO strap pins" },
+	{ 63, 1, OTP_REG_RESERVED, "" }
+};
+
+struct otpconf_info a0_conf_info[] = {
+	{ 0, 0,  1,  0, "Enable Secure Region programming" },
+	{ 0, 0,  1,  1, "Disable Secure Region programming" },
+	{ 0, 1,  1,  0, "Disable Secure Boot" },
+	{ 0, 1,  1,  1, "Enable Secure Boot" },
+	{ 0, 2,  1,  0, "Initialization programming not done" },
+	{ 0, 2,  1,  1, "Initialization programming done" },
+	{ 0, 3,  1,  0, "User region ECC disable" },
+	{ 0, 3,  1,  1, "User region ECC enable" },
+	{ 0, 4,  1,  0, "Secure Region ECC disable" },
+	{ 0, 4,  1,  1, "Secure Region ECC enable" },
+	{ 0, 5,  1,  0, "Enable low security key" },
+	{ 0, 5,  1,  1, "Disable low security key" },
+	{ 0, 6,  1,  0, "Do not ignore Secure Boot hardware strap" },
+	{ 0, 6,  1,  1, "Ignore Secure Boot hardware strap" },
+	{ 0, 7,  1,  0, "Secure Boot Mode: 1" },
+	{ 0, 7,  1,  1, "Secure Boot Mode: 2" },
+	{ 0, 8,  2,  0, "Single cell mode (recommended)" },
+	{ 0, 8,  2,  1, "Differential mode" },
+	{ 0, 8,  2,  2, "Differential-redundant mode" },
+	{ 0, 10, 2,  0, "RSA mode : RSA1024" },
+	{ 0, 10, 2,  1, "RSA mode : RSA2048" },
+	{ 0, 10, 2,  2, "RSA mode : RSA3072" },
+	{ 0, 10, 2,  3, "RSA mode : RSA4096" },
+	{ 0, 12, 2,  0, "SHA mode : SHA224" },
+	{ 0, 12, 2,  1, "SHA mode : SHA256" },
+	{ 0, 12, 2,  2, "SHA mode : SHA384" },
+	{ 0, 12, 2,  3, "SHA mode : SHA512" },
+	{ 0, 14, 2,  OTP_REG_RESERVED, "" },
+	{ 0, 16, 6,  OTP_REG_VALUE, "Secure Region size (DW): 0x%x" },
+	{ 0, 22, 1,  0, "Secure Region : Writable" },
+	{ 0, 22, 1,  1, "Secure Region : Write Protect" },
+	{ 0, 23, 1,  0, "User Region : Writable" },
+	{ 0, 23, 1,  1, "User Region : Write Protect" },
+	{ 0, 24, 1,  0, "Configure Region : Writable" },
+	{ 0, 24, 1,  1, "Configure Region : Write Protect" },
+	{ 0, 25, 1,  0, "OTP strap Region : Writable" },
+	{ 0, 25, 1,  1, "OTP strap Region : Write Protect" },
+	{ 0, 26, 1,  0, "Disable Copy Boot Image to Internal SRAM" },
+	{ 0, 26, 1,  1, "Copy Boot Image to Internal SRAM" },
+	{ 0, 27, 1,  0, "Disable image encryption" },
+	{ 0, 27, 1,  1, "Enable image encryption" },
+	{ 0, 28, 1,  OTP_REG_RESERVED, "" },
+	{ 0, 29, 1,  0, "OTP key retire Region : Writable" },
+	{ 0, 29, 1,  1, "OTP key retire Region : Write Protect" },
+	{ 0, 30, 1,  0, "Data region redundancy repair disable" },
+	{ 0, 30, 1,  1, "Data region redundancy repair enable" },
+	{ 0, 31, 1,  0, "OTP memory lock disable" },
+	{ 0, 31, 1,  1, "OTP memory lock enable" },
+	{ 2, 0,  16, OTP_REG_VALUE, "Vender ID : 0x%x" },
+	{ 2, 16, 16, OTP_REG_VALUE, "Key Revision : 0x%x" },
+	{ 3, 0,  16, OTP_REG_VALUE, "Secure boot header offset : 0x%x" },
+	{ 4, 0,  8,  OTP_REG_VALID_BIT, "Keys valid  : %s" },
+	{ 4, 16, 8,  OTP_REG_VALID_BIT, "Keys retire  : %s" },
+	{ 5, 0,  32, OTP_REG_VALUE, "User define data, random number low : 0x%x" },
+	{ 6, 0,  32, OTP_REG_VALUE, "User define data, random number high : 0x%x" },
+	{ 7, 0,  1,  0, "Force enable PCI bus to AHB bus bridge" },
+	{ 7, 0,  1,  1, "Force disable PCI bus to AHB bus bridge" },
+	{ 7, 1,  1,  0, "Force enable UART5 debug port function" },
+	{ 7, 1,  1,  1, "Force disable UART5 debug port function" },
+	{ 7, 2,  1,  0, "Force enable XDMA function" },
+	{ 7, 2,  1,  1, "Force disable XDMA function" },
+	{ 7, 3,  1,  0, "Force enable APB to PCIE device bridge" },
+	{ 7, 3,  1,  1, "Force disable APB to PCIE device bridge" },
+	{ 7, 4,  1,  0, "Force enable APB to PCIE bridge config access" },
+	{ 7, 4,  1,  1, "Force disable APB to PCIE bridge config access" },
+	{ 7, 5,  1,  0, "Force enable PCIE bus trace buffer" },
+	{ 7, 5,  1,  1, "Force disable PCIE bus trace buffer" },
+	{ 7, 6,  1,  0, "Force enable the capability for PCIE device port as a Root Complex" },
+	{ 7, 6,  1,  1, "Force disable the capability for PCIE device port as a Root Complex" },
+	{ 7, 16, 1,  0, "Force enable ESPI bus to AHB bus bridge" },
+	{ 7, 16, 1,  1, "Force disable ESPI bus to AHB bus bridge" },
+	{ 7, 17, 1,  0, "Force enable LPC bus to AHB bus bridge1" },
+	{ 7, 17, 1,  1, "Force disable LPC bus to AHB bus bridge1" },
+	{ 7, 18, 1,  0, "Force enable LPC bus to AHB bus bridge2" },
+	{ 7, 18, 1,  1, "Force disable LPC bus to AHB bus bridge2" },
+	{ 7, 19, 1,  0, "Force enable UART1 debug port function" },
+	{ 7, 19, 1,  1, "Force disable UART1 debug port function" },
+	{ 7, 31, 1,  0, "Disable chip security setting" },
+	{ 7, 31, 1,  1, "Enable chip security setting" },
+	{ 8, 0,  32, OTP_REG_VALUE, "Redundancy Repair : 0x%x" },
+	{ 10, 0, 32, OTP_REG_VALUE, "Manifest ID low : 0x%x" },
+	{ 11, 0, 32, OTP_REG_VALUE, "Manifest ID high : 0x%x" }
+};
+
+struct otpconf_info a1_conf_info[] = {
+	{ 0, 0,  1,  OTP_REG_RESERVED, "" },
+	{ 0, 1,  1,  0, "Disable Secure Boot" },
+	{ 0, 1,  1,  1, "Enable Secure Boot" },
+	{ 0, 2,  1,  0, "Initialization programming not done" },
+	{ 0, 2,  1,  1, "Initialization programming done" },
+	{ 0, 3,  1,  0, "User region ECC disable" },
+	{ 0, 3,  1,  1, "User region ECC enable" },
+	{ 0, 4,  1,  0, "Secure Region ECC disable" },
+	{ 0, 4,  1,  1, "Secure Region ECC enable" },
+	{ 0, 5,  1,  0, "Enable low security key" },
+	{ 0, 5,  1,  1, "Disable low security key" },
+	{ 0, 6,  1,  0, "Do not ignore Secure Boot hardware strap" },
+	{ 0, 6,  1,  1, "Ignore Secure Boot hardware strap" },
+	{ 0, 7,  1,  0, "Secure Boot Mode: GCM" },
+	{ 0, 7,  1,  1, "Secure Boot Mode: 2" },
+	{ 0, 8,  2,  0, "Single cell mode (recommended)" },
+	{ 0, 8,  2,  1, "Differential mode" },
+	{ 0, 8,  2,  2, "Differential-redundant mode" },
+	{ 0, 10, 2,  0, "RSA mode : RSA1024" },
+	{ 0, 10, 2,  1, "RSA mode : RSA2048" },
+	{ 0, 10, 2,  2, "RSA mode : RSA3072" },
+	{ 0, 10, 2,  3, "RSA mode : RSA4096" },
+	{ 0, 12, 2,  0, "SHA mode : SHA224" },
+	{ 0, 12, 2,  1, "SHA mode : SHA256" },
+	{ 0, 12, 2,  2, "SHA mode : SHA384" },
+	{ 0, 12, 2,  3, "SHA mode : SHA512" },
+	{ 0, 14, 2,  OTP_REG_RESERVED, "" },
+	{ 0, 16, 6,  OTP_REG_VALUE, "Secure Region size (DW): 0x%x" },
+	{ 0, 22, 1,  0, "Secure Region : Writable" },
+	{ 0, 22, 1,  1, "Secure Region : Write Protect" },
+	{ 0, 23, 1,  0, "User Region : Writable" },
+	{ 0, 23, 1,  1, "User Region : Write Protect" },
+	{ 0, 24, 1,  0, "Configure Region : Writable" },
+	{ 0, 24, 1,  1, "Configure Region : Write Protect" },
+	{ 0, 25, 1,  0, "OTP strap Region : Writable" },
+	{ 0, 25, 1,  1, "OTP strap Region : Write Protect" },
+	{ 0, 26, 1,  0, "Disable Copy Boot Image to Internal SRAM" },
+	{ 0, 26, 1,  1, "Copy Boot Image to Internal SRAM" },
+	{ 0, 27, 1,  0, "Disable image encryption" },
+	{ 0, 27, 1,  1, "Enable image encryption" },
+	{ 0, 28, 1,  OTP_REG_RESERVED, "" },
+	{ 0, 29, 1,  0, "OTP key retire Region : Writable" },
+	{ 0, 29, 1,  1, "OTP key retire Region : Write Protect" },
+	{ 0, 30, 1,  0, "Data region redundancy repair disable" },
+	{ 0, 30, 1,  1, "Data region redundancy repair enable" },
+	{ 0, 31, 1,  0, "OTP memory lock disable" },
+	{ 0, 31, 1,  1, "OTP memory lock enable" },
+	{ 2, 0,  16, OTP_REG_VALUE, "Vender ID : 0x%x" },
+	{ 2, 16, 16, OTP_REG_VALUE, "Key Revision : 0x%x" },
+	{ 3, 0,  16, OTP_REG_VALUE, "Secure boot header offset : 0x%x" },
+	{ 4, 0,  8,  OTP_REG_VALID_BIT, "Keys valid  : %s" },
+	{ 4, 16, 8,  OTP_REG_VALID_BIT, "Keys retire  : %s" },
+	{ 5, 0,  32, OTP_REG_VALUE, "User define data, random number low : 0x%x" },
+	{ 6, 0,  32, OTP_REG_VALUE, "User define data, random number high : 0x%x" },
+	{ 7, 0,  1,  0, "Force enable PCI bus to AHB bus bridge" },
+	{ 7, 0,  1,  1, "Force disable PCI bus to AHB bus bridge" },
+	{ 7, 1,  1,  0, "Force enable UART5 debug port function" },
+	{ 7, 1,  1,  1, "Force disable UART5 debug port function" },
+	{ 7, 2,  1,  0, "Force enable XDMA function" },
+	{ 7, 2,  1,  1, "Force disable XDMA function" },
+	{ 7, 3,  1,  0, "Force enable APB to PCIE device bridge" },
+	{ 7, 3,  1,  1, "Force disable APB to PCIE device bridge" },
+	{ 7, 4,  1,  0, "Force enable APB to PCIE bridge config access" },
+	{ 7, 4,  1,  1, "Force disable APB to PCIE bridge config access" },
+	{ 7, 5,  1,  0, "Force enable PCIE bus trace buffer" },
+	{ 7, 5,  1,  1, "Force disable PCIE bus trace buffer" },
+	{ 7, 6,  1,  0, "Force enable the capability for PCIE device port as a Root Complex" },
+	{ 7, 6,  1,  1, "Force disable the capability for PCIE device port as a Root Complex" },
+	{ 7, 16, 1,  0, "Force enable ESPI bus to AHB bus bridge" },
+	{ 7, 16, 1,  1, "Force disable ESPI bus to AHB bus bridge" },
+	{ 7, 17, 1,  0, "Force enable LPC bus to AHB bus bridge1" },
+	{ 7, 17, 1,  1, "Force disable LPC bus to AHB bus bridge1" },
+	{ 7, 18, 1,  0, "Force enable LPC bus to AHB bus bridge2" },
+	{ 7, 18, 1,  1, "Force disable LPC bus to AHB bus bridge2" },
+	{ 7, 19, 1,  0, "Force enable UART1 debug port function" },
+	{ 7, 19, 1,  1, "Force disable UART1 debug port function" },
+	{ 7, 31, 1,  0, "Disable chip security setting" },
+	{ 7, 31, 1,  1, "Enable chip security setting" },
+	{ 8, 0,  32, OTP_REG_VALUE, "Redundancy Repair : 0x%x" },
+	{ 10, 0, 32, OTP_REG_VALUE, "Manifest ID low : 0x%x" },
+	{ 11, 0, 32, OTP_REG_VALUE, "Manifest ID high : 0x%x" }
+};
+
+struct otpkey_type a0_key_type[] = {
+	{0, OTP_KEY_TYPE_AES,   0, "AES-256 as OEM platform key for image encryption/decryption"},
+	{1, OTP_KEY_TYPE_VAULT, 0, "AES-256 as secret vault key"},
+	{4, OTP_KEY_TYPE_HMAC,  1, "HMAC as encrypted OEM HMAC keys in Mode 1"},
+	{8, OTP_KEY_TYPE_RSA,   1, "RSA-public as OEM DSS public keys in Mode 2"},
+	{9, OTP_KEY_TYPE_RSA,   0, "RSA-public as SOC public key"},
+	{10, OTP_KEY_TYPE_RSA,  0, "RSA-public as AES key decryption key"},
+	{13, OTP_KEY_TYPE_RSA,  0, "RSA-private as SOC private key"},
+	{14, OTP_KEY_TYPE_RSA,  0, "RSA-private as AES key decryption key"},
+};
+
+struct otpkey_type a1_key_type[] = {
+	{1, OTP_KEY_TYPE_VAULT, 0, "AES-256 as secret vault key"},
+	{2, OTP_KEY_TYPE_AES,   1, "AES-256 as OEM platform key for image encryption/decryption in Mode 2 or AES-256 as OEM DSS keys for Mode GCM"},
+	{8, OTP_KEY_TYPE_RSA,   1, "RSA-public as OEM DSS public keys in Mode 2"},
+	{10, OTP_KEY_TYPE_RSA,  0, "RSA-public as AES key decryption key"},
+	{14, OTP_KEY_TYPE_RSA,  0, "RSA-private as AES key decryption key"},
+};
+
+static uint32_t chip_version(void)
+{
+	uint32_t rev_id;
+
+	rev_id = (readl(0x1e6e2004) >> 16) & 0xff ;
+
+	return rev_id;
+}
+
+static void otp_read_data(uint32_t offset, uint32_t *data)
 {
 	writel(offset, 0x1e6f2010); //Read address
 	writel(0x23b1e361, 0x1e6f2004); //trigger read
 	udelay(2);
 	data[0] = readl(0x1e6f2020);
 	data[1] = readl(0x1e6f2024);
-	return 1;
 }
 
-static int otp_read_config(uint32_t offset, uint32_t *data)
+static void otp_read_config(uint32_t offset, uint32_t *data)
 {
 	int config_offset;
 
@@ -60,8 +558,6 @@
 	writel(0x23b1e361, 0x1e6f2004); //trigger read
 	udelay(2);
 	data[0] = readl(0x1e6f2020);
-
-	return 1;
 }
 
 static int otp_print_config(uint32_t offset, int dw_count)
@@ -70,13 +566,13 @@
 	uint32_t ret[1];
 
 	if (offset + dw_count > 32)
-		return -1;
+		return OTP_USAGE;
 	for (i = offset; i < offset + dw_count; i ++) {
 		otp_read_config(i, ret);
-		printf("OTPCFG%d: %08X\n", i, ret[0]);
+		printf("OTPCFG%X: %08X\n", i, ret[0]);
 	}
 	printf("\n");
-	return 1;
+	return OTP_SUCCESS;
 }
 
 static int otp_print_data(uint32_t offset, int dw_count)
@@ -85,7 +581,7 @@
 	uint32_t ret[2];
 
 	if (offset + dw_count > 2048 || offset % 4 != 0)
-		return -1;
+		return OTP_USAGE;
 	for (i = offset; i < offset + dw_count; i += 2) {
 		otp_read_data(i, ret);
 		if (i % 4 == 0)
@@ -95,7 +591,7 @@
 
 	}
 	printf("\n");
-	return 1;
+	return OTP_SUCCESS;
 }
 
 static int otp_compare(uint32_t otp_addr, uint32_t addr)
@@ -138,7 +634,7 @@
 	udelay(85);
 }
 
-static int prog_verify(uint32_t otp_addr, int bit_offset, int value)
+static int verify_bit(uint32_t otp_addr, int bit_offset, int value)
 {
 	int ret;
 
@@ -146,365 +642,109 @@
 	writel(0x23b1e361, 0x1e6f2004); //trigger read
 	udelay(2);
 	ret = readl(0x1e6f2020);
-	// printf("prog_verify = %x\n", ret);
+	// printf("verify_bit = %x\n", ret);
 	if (((ret >> bit_offset) & 1) == value)
 		return 0;
 	else
 		return -1;
 }
 
-static int otp_conf_parse(uint32_t *OTPCFG)
+static uint32_t verify_dw(uint32_t otp_addr, uint32_t *value, uint32_t *keep, uint32_t *compare, int size)
 {
-	int tmp, i, pass;
-
-	printf("OTPCFG0-D[0]\n");
-	if (OTPCFG[0] & (1))
-		printf("  Disable Secure Region programming\n");
-	else
-		printf("  Enable Secure Region programming\n");
-	printf("OTPCFG0-D[1]\n");
-	if (OTPCFG[0] & (1 << 1))
-		printf("  Enable Secure Boot\n");
-	else
-		printf("  Disable Secure Boot\n");
-	printf("OTPCFG0-D[3]\n");
-	if (OTPCFG[0] & (1 << 3))
-		printf("  User region ECC enable\n");
-	else
-		printf("  User region ECC disable\n");
-	printf("OTPCFG0-D[4]\n");
-	if (OTPCFG[0] & (1 << 4))
-		printf("  Secure Region ECC enable\n");
-	else
-		printf("  Secure Region ECC disable\n");
-	printf("OTPCFG0-D[5]\n");
-	if (OTPCFG[0] & (1 << 5))
-		printf("  Disable low security key\n");
-	else
-		printf("  Enable low security key\n");
-	printf("OTPCFG0-D[6]\n");
-	if (OTPCFG[0] & (1 << 6))
-		printf("  Ignore Secure Boot hardware strap\n");
-	else
-		printf("  Do not ignore Secure Boot hardware strap\n");
-	printf("OTPCFG0-D[7]\n");
-	printf("  Secure Boot Mode: %d\n", (OTPCFG[0] >> 7) & 1);
-	printf("OTPCFG0-D[9:8]\n");
-	printf("  OTP bit cell mode : ");
-	tmp = ((OTPCFG[0] >> 8) & 3);
-	if (tmp == 0) {
-		printf("Single cell mode (recommended)\n");
-	} else if (tmp == 1) {
-		printf("Differnetial mode\n");
-	} else if (tmp == 2) {
-		printf("Differential-redundant mode\n");
-	} else {
-		printf("Value error\n");
-		return -1;
-	}
-	printf("OTPCFG0-D[11:10]\n");
-	printf("  RSA mode : ");
-	tmp = ((OTPCFG[0] >> 10) & 3);
-	if (tmp == 0) {
-		printf("RSA1024\n");
-	} else if (tmp == 1) {
-		printf("RSA2048\n");
-	} else if (tmp == 2) {
-		printf("RSA3072\n");
-	} else {
-		printf("RSA4096\n");
-	}
-	printf("OTPCFG0-D[13:12]\n");
-	printf("  SHA mode : ");
-	tmp = ((OTPCFG[0] >> 12) & 3);
-	if (tmp == 0) {
-		printf("SHA224\n");
-	} else if (tmp == 1) {
-		printf("SHA256\n");
-	} else if (tmp == 2) {
-		printf("SHA384\n");
-	} else {
-		printf("SHA512\n");
-	}
-
-	printf("OTPCFG0-D[21:16]\n");
-	tmp = ((OTPCFG[0] >> 16) & 0x3F);
-	printf("  Secure Region size (DW): %x\n", tmp);
-
-	printf("OTPCFG0-D[22]\n");
-	if (OTPCFG[0] & (1 << 22))
-		printf("  Secure Region : Write Protect\n");
-	else
-		printf("  Secure Region : Writable\n");
-	printf("OTPCFG0-D[23]\n");
-	if (OTPCFG[0] & (1 << 23))
-		printf("  User Region : Write Protect\n");
-	else
-		printf("  User Region : Writable\n");
-	printf("OTPCFG0-D[24]\n");
-	if (OTPCFG[0] & (1 << 24))
-		printf("  Configure Region : Write Protect\n");
-	else
-		printf("  Configure Region : Writable\n");
-	printf("OTPCFG0-D[25]\n");
-	if (OTPCFG[0] & (1 << 7))
-		printf("  OTP strap Region : Write Protect\n");
-	else
-		printf("  OTP strap Region : Writable\n");
-	printf("OTPCFG0-D[26]\n");
-	if (OTPCFG[0] & (1 << 26))
-		printf("  Copy Boot Image to Internal SRAM\n");
-	else
-		printf("  Disable Copy Boot Image to Internal SRAM\n");
-	printf("OTPCFG0-D[27]\n");
-	if (OTPCFG[0] & (1 << 27))
-		printf("  Enable image encryption\n");
-	else
-		printf("  Disable image encryption\n");
-	printf("OTPCFG0-D[29]\n");
-	if (OTPCFG[0] & (1 << 29))
-		printf("  OTP key retire Region : Write Protect\n");
-	else
-		printf("  OTP key retire Region : Writable\n");
-	printf("OTPCFG0-D[30]\n");
-	if (OTPCFG[0] & (1 << 30))
-		printf("  SIPROM RED_EN redundancy repair enable\n");
-	else
-		printf("  SIPROM RED_EN redundancy repair disable\n");
-	printf("OTPCFG0-D[31]\n");
-	if (OTPCFG[0] & (1 << 31))
-		printf("  SIPROM Mlock memory lock enable\n");
-	else
-		printf("  SIPROM Mlock memory lock disable\n");
+	uint32_t ret[2];
 
-	printf("OTPCFG2-D[15:0]\n");
-	tmp = (OTPCFG[2] & 0xFFFF);
-	printf("  Vender ID : %x\n", tmp);
-
-	printf("OTPCFG2-D[31:16]\n");
-	tmp = ((OTPCFG[2] >> 16) & 0xFFFF);
-	printf("  Key Revision : %x\n", tmp);
-
-	printf("OTPCFG3-D[15:0]\n");
-	tmp = (OTPCFG[3] & 0xFFFF);
-	printf("  Secure boot header offset : %x\n", tmp);
+	otp_addr &= ~(1 << 15);
 
-	printf("OTPCFG4-D[7:0]\n");
-	tmp = (OTPCFG[4] & 0xff);
-	pass = -1;
-	for (i = 0; i < 7; i++) {
-		if (tmp == (1 << i)) {
-			if (pass != -1) {
-				printf("  Keys valid ID value error : %x\n", tmp);
+	if (otp_addr % 2 == 0)
+		writel(otp_addr, 0x1e6f2010); //Read address
+	else
+		writel(otp_addr - 1, 0x1e6f2010); //Read address
+	writel(0x23b1e361, 0x1e6f2004); //trigger read
+	udelay(2);
+	ret[0] = readl(0x1e6f2020);
+	ret[1] = readl(0x1e6f2024);
+	if (size == 1) {
+		if (otp_addr % 2 == 0) {
+			// printf("check %x : %x = %x\n", otp_addr, ret[0], value[0]);
+			if ((value[0] & ~keep[0]) == (ret[0] & ~keep[0])) {
+				compare[0] = 0;
+				return 0;
+			} else {
+				compare[0] = value[0] ^ ret[0];
 				return -1;
 			}
-			pass = i;
-		}
-	}
-	printf("  Keys valid ID : %d\n", pass);
 
-	printf("OTPCFG4-D[23:16]\n");
-	tmp = ((OTPCFG[4] >> 16) & 0xff);
-	pass = -1;
-	for (i = 0; i < 7; i++) {
-		if (tmp == (1 << i)) {
-			if (pass != -1) {
-				printf("  Keys Retire ID value error : %x\n", tmp);
+		} else {
+			// printf("check %x : %x = %x\n", otp_addr, ret[1], value[0]);
+			if ((value[0] & ~keep[0]) == (ret[1] & ~keep[0])) {
+				compare[0] = ~0;
+				return 0;
+			} else {
+				compare[0] = ~(value[0] ^ ret[1]);
 				return -1;
 			}
-			pass = i;
-		}
-	}
-	printf("  Keys Retire ID : %d\n", pass);
-
-	printf("OTPCFG5-D[31:0]\n");
-	printf("  User define data, random number low : %x\n", OTPCFG[5]);
-
-	printf("OTPCFG6-D[31:0]\n");
-	printf("  User define data, random number high : %x\n", OTPCFG[6]);
-
-	printf("OTPCFG8-D[31:0]\n");
-	printf("  Redundancy Repair : %x\n", OTPCFG[8]);
-
-	printf("OTPCFG10-D[31:0]\n");
-	printf("  Manifest ID low : %x\n", OTPCFG[10]);
-
-	printf("OTPCFG11-D[31:0]\n");
-	printf("  Manifest ID high : %x\n", OTPCFG[11]);
-	return 0;
-
-}
-
-static void buf_print(char *buf, int len)
-{
-	int i;
-	printf("      00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n");
-	for (i = 0; i < len; i++) {
-		if (i % 16 == 0) {
-			printf("%04X: ", i);
 		}
-		printf("%02X ", buf[i]);
-		if ((i + 1) % 16 == 0) {
-			printf("\n");
+	} else if (size == 2) {
+		// otp_addr should be even
+		if ((value[0] & ~keep[0]) == (ret[0] & ~keep[0]) && (value[1] & ~keep[1]) == (ret[1] & ~keep[1])) {
+			// printf("check[0] %x : %x = %x\n", otp_addr, ret[0], value[0]);
+			// printf("check[1] %x : %x = %x\n", otp_addr, ret[1], value[1]);
+			compare[0] = 0;
+			compare[1] = ~0;
+			return 0;
+		} else {
+			// printf("check[0] %x : %x = %x\n", otp_addr, ret[0], value[0]);
+			// printf("check[1] %x : %x = %x\n", otp_addr, ret[1], value[1]);
+			compare[0] = value[0] ^ ret[0];
+			compare[1] = ~(value[1] ^ ret[1]);
+			return -1;
 		}
+	} else {
+		return -1;
 	}
 }
 
-static int otp_data_parse(uint32_t *buf, int dw_count)
+static void otp_soak(int soak)
 {
-	int key_id, key_offset, last, key_type, key_length, exp_length;
-	char *byte_buf;
-	int i = 0, len = 0;
-	byte_buf = (char *)buf;
-	while (1) {
-		key_id = buf[i] & 0x7;
-		key_offset = buf[i] & 0x1ff8;
-		last = (buf[i] >> 13) & 1;
-		key_type = (buf[i] >> 14) & 0xf;
-		key_length = (buf[i] >> 18) & 0x3;
-		exp_length = (buf[i] >> 20) & 0xfff;
-		printf("Key[%d]:\n", i);
-		printf("Key Type: ");
-		switch (key_type) {
-		case 0:
-			printf("AES-256 as OEM platform key for image encryption/decryption\n");
-			break;
-		case 1:
-			printf("AES-256 as secret vault key\n");
-			break;
-		case 4:
-			printf("HMAC as encrypted OEM HMAC keys in Mode 1\n");
-			break;
-		case 8:
-			printf("RSA-public as OEM DSS public keys in Mode 2\n");
-			break;
-		case 9:
-			printf("RSA-public as SOC public key\n");
-			break;
-		case 10:
-			printf("RSA-public as AES key decryption key\n");
-			break;
-		case 13:
-			printf("RSA-private as SOC private key\n");
-			break;
-		case 14:
-			printf("RSA-private as AES key decryption key\n");
-			break;
-		default:
-			printf("key_type error: %x\n", key_type);
-			return -1;
-		}
-		if (key_type == 4) {
-			printf("HMAC SHA Type: ");
-			switch (key_length) {
-			case 0:
-				printf("HMAC(SHA224)\n");
-				break;
-			case 1:
-				printf("HMAC(SHA256)\n");
-				break;
-			case 2:
-				printf("HMAC(SHA384)\n");
-				break;
-			case 3:
-				printf("HMAC(SHA512)\n");
-				break;
-			}
-		} else if (key_type != 0 || key_type != 1) {
-			printf("RSA SHA Type: ");
-			switch (key_length) {
-			case 0:
-				printf("RSA1024\n");
-				len = 0x100;
-				break;
-			case 1:
-				printf("RSA2048\n");
-				len = 0x200;
-				break;
-			case 2:
-				printf("RSA3072\n");
-				len = 0x300;
-				break;
-			case 3:
-				printf("RSA4096\n");
-				len = 0x400;
-				break;
-			}
-			printf("RSA exponent bit length: %d\n", exp_length);
-		}
-		if (key_type == 4 || key_type == 8)
-			printf("Key Number ID: %d\n", key_id);
-		printf("Key Value:\n");
-		if (key_type == 4) {
-			buf_print(&byte_buf[key_offset], 0x40);
-		} else if (key_type == 0 || key_type == 1) {
-			printf("AES Key:\n");
-			buf_print(&byte_buf[key_offset], 0x20);
-			printf("AES IV:\n");
-			buf_print(&byte_buf[key_offset + 0x20], 0x10);
-
-		} else {
-			printf("RSA mod:\n");
-			buf_print(&byte_buf[key_offset], len / 2);
-			printf("RSA exp:\n");
-			buf_print(&byte_buf[key_offset + (len / 2)], len / 2);
-		}
-		if (last)
-			break;
-		i++;
+	if (soak) {
+		otp_write(0x3000, 0x4021); // Write MRA
+		otp_write(0x5000, 0x1027); // Write MRB
+		otp_write(0x1000, 0x4820); // Write MR
+		writel(0x041930d4, 0x1e602008); //soak program
+	} else {
+		otp_write(0x3000, 0x4061); // Write MRA
+		otp_write(0x5000, 0x302f); // Write MRB
+		otp_write(0x1000, 0x4020); // Write MR
+		writel(0x04190760, 0x1e602008); //normal program
 	}
-	return 0;
 }
 
-static int otp_prog_conf(uint32_t *buf, int otp_addr, int dw_count)
+static void otp_prog_dw(uint32_t value, uint32_t keep, uint32_t prog_address)
 {
-	int i, j, k, bit_value;
-	int pass, soak;
-	uint32_t prog_bit, prog_address;
+	int j, bit_value, prog_bit;
 
-	for (i = 0; i < dw_count; i++) {
-		prog_address = 0x800;
-		prog_address |= ((i + otp_addr) / 8) * 0x200;
-		prog_address |= ((i + otp_addr) % 8) * 0x2;
-		for (j = 0; j < 32; j++) {
-			bit_value = (buf[i] >> j) & 0x1;
+	for (j = 0; j < 32; j++) {
+		if ((keep >> j) & 0x1)
+			continue;
+		bit_value = (value >> j) & 0x1;
+		if (prog_address % 2 == 0) {
 			if (bit_value)
 				prog_bit = ~(0x1 << j);
 			else
 				continue;
-			pass = 0;
-			soak = 0;
-			otp_write(0x3000, 0x4061); // Write MRA
-			otp_write(0x5000, 0x302f); // Write MRB
-			otp_write(0x1000, 0x4020); // Write MR
-			writel(0x04190760, 0x1e602008); //normal program
-			for (k = 0; k < RETRY; k++) {
-				if (!soak) {
-					otp_prog(prog_address, prog_bit);
-					if (prog_verify(prog_address, j, bit_value) == 0) {
-						pass = 1;
-						break;
-					}
-					soak = 1;
-					otp_write(0x3000, 0x4021); // Write MRA
-					otp_write(0x5000, 0x1027); // Write MRB
-					otp_write(0x1000, 0x4820); // Write MR
-					writel(0x041930d4, 0x1e602008); //soak program
-				}
-				otp_prog(prog_address, prog_bit);
-				if (prog_verify(prog_address, j, bit_value) == 0) {
-					pass = 1;
-					break;
-				}
-			}
-			if (!pass)
-				return -1;
+		} else {
+			prog_address |= 1 << 15;
+			if (bit_value)
+				continue;
+			else
+				prog_bit = 0x1 << j;
 		}
+		otp_prog(prog_address, prog_bit);
 	}
-	return 0;
 }
 
-static void otp_strp_status(struct otpstrap *otpstrap)
+
+static void otp_strap_status(struct otpstrap_status *otpstrap)
 {
 	uint32_t OTPSTRAP_RAW[2];
 	int i, j;
@@ -553,102 +793,626 @@
 	}
 }
 
-static int otp_strap_parse(uint32_t *buf)
+static int otp_print_conf_image(uint32_t *OTPCFG)
 {
-	int i;
-	uint32_t *strap_keep = buf + 2;
-	uint32_t *strap_protect = buf + 4;
-	int bit, pbit, kbit;
+	struct otpconf_info *conf_info = info_cb.conf_info;
+	uint32_t *OTPCFG_KEEP = &OTPCFG[12];
+	uint32_t mask;
+	uint32_t dw_offset;
+	uint32_t bit_offset;
+	uint32_t otp_value;
+	uint32_t otp_keep;
 	int fail = 0;
-	struct otpstrap otpstrap[64];
+	char valid_bit[20];
+	int i;
+	int j;
 
-	otp_strp_status(otpstrap);
-	for (i = 0; i < 64; i++) {
-		if (i < 32) {
-			bit = (buf[0] >> i) & 0x1;
-			kbit = (strap_keep[0] >> i) & 0x1;
-			pbit = (strap_protect[0] >> i) & 0x1;
-		} else {
-			bit = (buf[1] >> (i - 32)) & 0x1;
-			kbit = (strap_keep[1] >> (i - 32)) & 0x1;
-			pbit = (strap_protect[1] >> (i - 32)) & 0x1;
-		}
+	printf("DW    BIT        Value       Description\n");
+	printf("__________________________________________________________________________\n");
+	for (i = 0; i < info_cb.conf_info_len; i++) {
+		dw_offset = conf_info[i].dw_offset;
+		bit_offset = conf_info[i].bit_offset;
+		mask = BIT(conf_info[i].length) - 1;
+		otp_value = (OTPCFG[dw_offset] >> bit_offset) & mask;
+		otp_keep = (OTPCFG_KEEP[dw_offset] >> bit_offset) & mask;
 
-		if (kbit == 1) {
-			continue;
-		} else {
-			printf("OTPSTRAP[%d]:\n", i);
-		}
-		if (bit == otpstrap[i].value) {
-			printf("    The value is same as before, skip it.\n");
-			continue;
-		}
-		if (otpstrap[i].protected == 1) {
-			printf("    This bit is protected and is not writable\n");
-			fail = 1;
+		if (otp_keep == mask) {
 			continue;
-		}
-		if (otpstrap[i].remain_times == 0) {
-			printf("    This bit is no remaining number of times to write.\n");
+		} else if (otp_keep != 0) {
 			fail = 1;
-			continue;
-		}
-		if (pbit == 1) {
-			printf("    This bit will be protected and become non-writable.\n");
 		}
-		printf("    Write 1 to OTPSTRAP[%d] OPTION[%d], that value becomes frome %d to %d.\n", i, otpstrap[i].writeable_option + 1, otpstrap[i].value, otpstrap[i].value ^ 1);
-	}
-	if (fail == 1)
-		return -1;
-	else
-		return 0;
-}
 
-static void otp_print_strap(void)
-{
-	int i, j;
-	struct otpstrap otpstrap[64];
+		if ((otp_value != conf_info[i].value) &&
+		    conf_info[i].value != OTP_REG_RESERVED &&
+		    conf_info[i].value != OTP_REG_VALUE &&
+		    conf_info[i].value != OTP_REG_VALID_BIT)
+			continue;
+		printf("0x%-4X", dw_offset);
 
-	otp_strp_status(otpstrap);
+		if (conf_info[i].length == 1) {
+			printf("0x%-9X", conf_info[i].bit_offset);
+		} else {
+			printf("0x%-2X:0x%-4X",
+			       conf_info[i].bit_offset + conf_info[i].length - 1,
+			       conf_info[i].bit_offset);
+		}
+		printf("0x%-10x", otp_value);
 
-	for (i = 0; i < 64; i++) {
-		printf("OTPSTRAP[%d]:\n", i);
-		printf("  OTP Option value: ");
-		for (j = 1; j <= 7; j++)
-			printf("[%d]:%d ", j, otpstrap[i].option_array[j - 1]);
-		printf("\n");
-		printf("  OTP Value: %d\n", otpstrap[i].value);
-		printf("  Status:\n");
-		if (otpstrap[i].protected == 1) {
-			printf("    OTPSTRAP[%d] is protected and is not writable\n", i);
+		if (fail) {
+			printf("Keep mask error\n");
 		} else {
-			printf("    OTPSTRAP[%d] is not protected ", i);
-			if (otpstrap[i].remain_times == 0) {
-				printf("and no remaining number of times to write.\n");
+			if (conf_info[i].value == OTP_REG_RESERVED) {
+				printf("Reserved\n");
+			} else if (conf_info[i].value == OTP_REG_VALUE) {
+				printf(conf_info[i].information, otp_value);
+				printf("\n");
+			} else if (conf_info[i].value == OTP_REG_VALID_BIT) {
+				if (otp_value != 0) {
+					for (j = 0; j < 7; j++) {
+						if (otp_value == (1 << j)) {
+							valid_bit[j * 2] = '1';
+						} else {
+							valid_bit[j * 2] = '0';
+						}
+						valid_bit[j * 2 + 1] = ' ';
+					}
+					valid_bit[15] = 0;
+				} else {
+					strcpy(valid_bit, "0 0 0 0 0 0 0 0\0");
+				}
+				printf(conf_info[i].information, valid_bit);
+				printf("\n");
 			} else {
-				printf("and still can write %d number of times\n", otpstrap[i].remain_times);
+				printf("%s\n", conf_info[i].information);
 			}
 		}
 	}
+
+	if (fail)
+		return OTP_FAILURE;
+
+	return OTP_SUCCESS;
 }
 
-static int otp_prog_strap(uint32_t *buf)
+static int otp_print_conf_info(int input_offset)
 {
-	int i, j;
-	uint32_t *strap_keep = buf + 2;
-	uint32_t *strap_protect = buf + 4;
+	struct otpconf_info *conf_info = info_cb.conf_info;
+	uint32_t OTPCFG[12];
+	uint32_t mask;
+	uint32_t dw_offset;
+	uint32_t bit_offset;
+	uint32_t otp_value;
+	char valid_bit[20];
+	int i;
+	int j;
+
+	for (i = 0; i < 12; i++)
+		otp_read_config(i, &OTPCFG[i]);
+
+
+	printf("DW    BIT        Value       Description\n");
+	printf("__________________________________________________________________________\n");
+	for (i = 0; i < info_cb.conf_info_len; i++) {
+		if (input_offset != -1 && input_offset != conf_info[i].dw_offset)
+			continue;
+		dw_offset = conf_info[i].dw_offset;
+		bit_offset = conf_info[i].bit_offset;
+		mask = BIT(conf_info[i].length) - 1;
+		otp_value = (OTPCFG[dw_offset] >> bit_offset) & mask;
+
+		if ((otp_value != conf_info[i].value) &&
+		    conf_info[i].value != OTP_REG_RESERVED &&
+		    conf_info[i].value != OTP_REG_VALUE &&
+		    conf_info[i].value != OTP_REG_VALID_BIT)
+			continue;
+		printf("0x%-4X", dw_offset);
+
+		if (conf_info[i].length == 1) {
+			printf("0x%-9X", conf_info[i].bit_offset);
+		} else {
+			printf("0x%-2X:0x%-4X",
+			       conf_info[i].bit_offset + conf_info[i].length - 1,
+			       conf_info[i].bit_offset);
+		}
+		printf("0x%-10x", otp_value);
+
+		if (conf_info[i].value == OTP_REG_RESERVED) {
+			printf("Reserved\n");
+		} else if (conf_info[i].value == OTP_REG_VALUE) {
+			printf(conf_info[i].information, otp_value);
+			printf("\n");
+		} else if (conf_info[i].value == OTP_REG_VALID_BIT) {
+			if (otp_value != 0) {
+				for (j = 0; j < 7; j++) {
+					if (otp_value == (1 << j)) {
+						valid_bit[j * 2] = '1';
+					} else {
+						valid_bit[j * 2] = '0';
+					}
+					valid_bit[j * 2 + 1] = ' ';
+				}
+				valid_bit[15] = 0;
+			} else {
+				strcpy(valid_bit, "0 0 0 0 0 0 0 0\0");
+			}
+			printf(conf_info[i].information, valid_bit);
+			printf("\n");
+		} else {
+			printf("%s\n", conf_info[i].information);
+		}
+	}
+	return OTP_SUCCESS;
+}
+
+static int otp_print_strap_image(uint32_t *OTPSTRAP)
+{
+	struct otpstrap_info *strap_info = info_cb.strap_info;
+	uint32_t *OTPSTRAP_PRO = &OTPSTRAP[4];
+	uint32_t *OTPSTRAP_KEEP = &OTPSTRAP[2];
+	int i;
+	int fail = 0;
+	uint32_t bit_offset;
+	uint32_t dw_offset;
+	uint32_t mask;
+	uint32_t otp_value;
+	uint32_t otp_protect;
+	uint32_t otp_keep;
+
+	printf("BIT(hex)   Value       Protect     Description\n");
+	printf("__________________________________________________________________________________________\n");
+
+	for (i = 0; i < info_cb.strap_info_len; i++) {
+		if (strap_info[i].bit_offset > 32) {
+			dw_offset = 1;
+			bit_offset = strap_info[i].bit_offset - 32;
+		} else {
+			dw_offset = 0;
+			bit_offset = strap_info[i].bit_offset;
+		}
+
+		mask = BIT(strap_info[i].length) - 1;
+		otp_value = (OTPSTRAP[dw_offset] >> bit_offset) & mask;
+		otp_protect = (OTPSTRAP_PRO[dw_offset] >> bit_offset) & mask;
+		otp_keep = (OTPSTRAP_KEEP[dw_offset] >> bit_offset) & mask;
+
+		if (otp_keep == mask) {
+			continue;
+		} else if (otp_keep != 0) {
+			fail = 1;
+		}
+
+		if ((otp_value != strap_info[i].value) &&
+		    strap_info[i].value != OTP_REG_RESERVED)
+			continue;
+
+		if (strap_info[i].length == 1) {
+			printf("0x%-9X", strap_info[i].bit_offset);
+		} else {
+			printf("0x%-2X:0x%-4X",
+			       strap_info[i].bit_offset + strap_info[i].length - 1,
+			       strap_info[i].bit_offset);
+		}
+		printf("0x%-10x", otp_value);
+		printf("0x%-10x", otp_protect);
+
+		if (fail) {
+			printf("Keep mask error\n");
+		} else {
+			if (strap_info[i].value != OTP_REG_RESERVED)
+				printf("%s\n", strap_info[i].information);
+			else
+				printf("Reserved\n");
+		}
+	}
+
+	if (fail)
+		return OTP_FAILURE;
+
+	return OTP_SUCCESS;
+}
+
+static int otp_print_strap_info(int view)
+{
+	struct otpstrap_info *strap_info = info_cb.strap_info;
+	struct otpstrap_status strap_status[64];
+	int i, j;
+	int fail = 0;
+	uint32_t bit_offset;
+	uint32_t length;
+	uint32_t otp_value;
+	uint32_t otp_protect;
+
+	otp_strap_status(strap_status);
+
+	if (view) {
+		// printf("BIT(hex) Value  Option         Protect   Description\n");
+		// printf("                0 1 2 3 4 5 6\n");
+		printf("BIT(hex) Value  Remains  Protect   Description\n");
+		printf("___________________________________________________________________________________________________\n");
+	} else {
+		printf("BIT(hex)   Value       Description\n");
+		printf("________________________________________________________________________________\n");
+	}
+	for (i = 0; i < info_cb.strap_info_len; i++) {
+		otp_value = 0;
+		bit_offset = strap_info[i].bit_offset;
+		length = strap_info[i].length;
+		for (j = 0; j < length; j++) {
+			otp_value |= strap_status[bit_offset + j].value << j;
+			otp_protect |= strap_status[bit_offset + j].protected << j;
+		}
+		if ((otp_value != strap_info[i].value) &&
+		    strap_info[i].value != OTP_REG_RESERVED)
+			continue;
+		if (view) {
+			for (j = 0; j < length; j++) {
+				printf("0x%-7X", strap_info[i].bit_offset + j);
+				printf("0x%-5X", strap_status[bit_offset + j].value);
+				printf("%-9d", strap_status[bit_offset + j].remain_times);
+				printf("0x%-7X", strap_status[bit_offset].protected);
+				if (strap_info[i].value == OTP_REG_RESERVED) {
+					printf(" Reserved\n");
+					continue;
+				}
+				if (length == 1) {
+					printf(" %s\n", strap_info[i].information);
+					continue;
+				}
+
+				if (j == 0)
+					printf("/%s\n", strap_info[i].information);
+				else if (j == length - 1)
+					printf("\\ \"\n");
+				else
+					printf("| \"\n");
+			}
+		} else {
+			if (length == 1) {
+				printf("0x%-9X", strap_info[i].bit_offset);
+			} else {
+				printf("0x%-2X:0x%-4X",
+				       bit_offset + length - 1, bit_offset);
+			}
+
+			printf("0x%-10X", otp_value);
+
+			if (strap_info[i].value != OTP_REG_RESERVED)
+				printf("%s\n", strap_info[i].information);
+			else
+				printf("Reserved\n");
+		}
+	}
+
+	if (fail)
+		return OTP_FAILURE;
+
+	return OTP_SUCCESS;
+}
+
+static void buf_print(char *buf, int len)
+{
+	int i;
+	printf("      00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n");
+	for (i = 0; i < len; i++) {
+		if (i % 16 == 0) {
+			printf("%04X: ", i);
+		}
+		printf("%02X ", buf[i]);
+		if ((i + 1) % 16 == 0) {
+			printf("\n");
+		}
+	}
+}
+
+static int otp_print_data_info(uint32_t *buf)
+{
+	int key_id, key_offset, last, key_type, key_length, exp_length;
+	struct otpkey_type *key_info_array = info_cb.key_info;
+	struct otpkey_type key_info;
+	char *byte_buf;
+	int i = 0, len = 0;
+	int j;
+	byte_buf = (char *)buf;
+	while (1) {
+		key_id = buf[i] & 0x7;
+		key_offset = buf[i] & 0x1ff8;
+		last = (buf[i] >> 13) & 1;
+		key_type = (buf[i] >> 14) & 0xf;
+		key_length = (buf[i] >> 18) & 0x3;
+		exp_length = (buf[i] >> 20) & 0xfff;
+
+		for (j = 0; j < info_cb.key_info_len; j++) {
+			if (key_type == key_info_array[j].value) {
+				key_info = key_info_array[j];
+				break;
+			}
+		}
+
+		printf("\nKey[%d]:\n", i);
+		printf("Key Type: ");
+		printf("%s\n", key_info.information);
+
+		if (key_info.key_type == OTP_KEY_TYPE_HMAC) {
+			printf("HMAC SHA Type: ");
+			switch (key_length) {
+			case 0:
+				printf("HMAC(SHA224)\n");
+				break;
+			case 1:
+				printf("HMAC(SHA256)\n");
+				break;
+			case 2:
+				printf("HMAC(SHA384)\n");
+				break;
+			case 3:
+				printf("HMAC(SHA512)\n");
+				break;
+			}
+		} else if (key_info.key_type == OTP_KEY_TYPE_RSA) {
+			printf("RSA SHA Type: ");
+			switch (key_length) {
+			case 0:
+				printf("RSA1024\n");
+				len = 0x100;
+				break;
+			case 1:
+				printf("RSA2048\n");
+				len = 0x200;
+				break;
+			case 2:
+				printf("RSA3072\n");
+				len = 0x300;
+				break;
+			case 3:
+				printf("RSA4096\n");
+				len = 0x400;
+				break;
+			}
+			printf("RSA exponent bit length: %d\n", exp_length);
+		}
+		if (key_info.need_id)
+			printf("Key Number ID: %d\n", key_id);
+		printf("Key Value:\n");
+		if (key_info.key_type == OTP_KEY_TYPE_HMAC) {
+			buf_print(&byte_buf[key_offset], 0x40);
+		} else if (key_info.key_type == OTP_KEY_TYPE_AES) {
+			printf("AES Key:\n");
+			buf_print(&byte_buf[key_offset], 0x20);
+			if (info_cb.version == 0) {
+				printf("AES IV:\n");
+				buf_print(&byte_buf[key_offset + 0x20], 0x10);
+			}
+
+		} else if (key_info.key_type == OTP_KEY_TYPE_VAULT) {
+			if (info_cb.version == 0) {
+				printf("AES Key:\n");
+				buf_print(&byte_buf[key_offset], 0x20);
+				printf("AES IV:\n");
+				buf_print(&byte_buf[key_offset + 0x20], 0x10);
+			} else if (info_cb.version == 1) {
+				printf("AES Key 1:\n");
+				buf_print(&byte_buf[key_offset], 0x20);
+				printf("AES Key 2:\n");
+				buf_print(&byte_buf[key_offset + 0x20], 0x20);
+			}
+
+		} else if (key_info.key_type == OTP_KEY_TYPE_RSA) {
+			printf("RSA mod:\n");
+			buf_print(&byte_buf[key_offset], len / 2);
+			printf("RSA exp:\n");
+			buf_print(&byte_buf[key_offset + (len / 2)], len / 2);
+		}
+		if (last)
+			break;
+		i++;
+	}
+	return 0;
+}
+
+static int otp_prog_conf(uint32_t *buf)
+{
+	int i, k;
+	int pass = 0;
+	int soak = 0;
+	uint32_t prog_address;
+	uint32_t data[12];
+	uint32_t compare[2];
+	uint32_t *buf_keep = &buf[12];
+	uint32_t data_masked;
+	uint32_t buf_masked;
+
+	printf("Read OTP Config Region:\n");
+
+	printProgress(0, 12, "");
+	for (i = 0; i < 12 ; i ++) {
+		printProgress(i + 1, 12, "");
+		prog_address = 0x800;
+		prog_address |= (i / 8) * 0x200;
+		prog_address |= (i % 8) * 0x2;
+		otp_read_data(prog_address, &data[i]);
+	}
+
+	printf("Check writable...\n");
+	for (i = 0; i < 12; i++) {
+		data_masked = data[i]  & ~buf_keep[i];
+		buf_masked  = buf[i] & ~buf_keep[i];
+		if (data_masked == buf_masked)
+			continue;
+		if ((data_masked | buf_masked) == buf_masked) {
+			continue;
+		} else {
+			printf("Input image can't program into OTP, please check.\n");
+			printf("OTPCFG[%X] = %x\n", i, data[i]);
+			printf("Input [%X] = %x\n", i, buf[i]);
+			printf("Mask  [%X] = %x\n", i, ~buf_keep[i]);
+			return OTP_FAILURE;
+		}
+	}
+
+	printf("Start Programing...\n");
+	printProgress(0, 12, "");
+	otp_soak(0);
+	for (i = 0; i < 12; i++) {
+		data_masked = data[i]  & ~buf_keep[i];
+		buf_masked  = buf[i] & ~buf_keep[i];
+		prog_address = 0x800;
+		prog_address |= (i / 8) * 0x200;
+		prog_address |= (i % 8) * 0x2;
+		if (data_masked == buf_masked) {
+			printProgress(i + 1, 12, "[%03X]=%08X HIT", prog_address, buf[i]);
+			continue;
+		}
+		if (soak) {
+			soak = 0;
+			otp_soak(0);
+		}
+		printProgress(i + 1, 12, "[%03X]=%08X    ", prog_address, buf[i]);
+
+		otp_prog_dw(buf[i], buf_keep[i], prog_address);
+
+		pass = 0;
+		for (k = 0; k < RETRY; k++) {
+			if (verify_dw(prog_address, &buf[i], &buf_keep[i], compare, 1) != 0) {
+				if (soak == 0) {
+					soak = 1;
+					otp_soak(1);
+				}
+				otp_prog_dw(compare[0], prog_address, 1);
+			} else {
+				pass = 1;
+				break;
+			}
+		}
+	}
+
+	if (!pass)
+		return OTP_FAILURE;
+
+	return OTP_SUCCESS;
+
+}
+
+
+static int otp_strap_image_confirm(uint32_t *buf)
+{
+	int i;
+	uint32_t *strap_keep = buf + 2;
+	uint32_t *strap_protect = buf + 4;
+	int bit, pbit, kbit;
+	int fail = 0;
+	int skip = -1;
+	struct otpstrap_status otpstrap[64];
+
+	otp_strap_status(otpstrap);
+	for (i = 0; i < 64; i++) {
+		if (i < 32) {
+			bit = (buf[0] >> i) & 0x1;
+			kbit = (strap_keep[0] >> i) & 0x1;
+			pbit = (strap_protect[0] >> i) & 0x1;
+		} else {
+			bit = (buf[1] >> (i - 32)) & 0x1;
+			kbit = (strap_keep[1] >> (i - 32)) & 0x1;
+			pbit = (strap_protect[1] >> (i - 32)) & 0x1;
+		}
+
+		if (kbit == 1) {
+			continue;
+		} else {
+			printf("OTPSTRAP[%X]:\n", i);
+		}
+		if (bit == otpstrap[i].value) {
+			printf("    The value is same as before, skip it.\n");
+			if (skip == -1)
+				skip = 1;
+			continue;
+		} else {
+			skip = 0;
+		}
+		if (otpstrap[i].protected == 1) {
+			printf("    This bit is protected and is not writable\n");
+			fail = 1;
+			continue;
+		}
+		if (otpstrap[i].remain_times == 0) {
+			printf("    This bit is no remaining times to write.\n");
+			fail = 1;
+			continue;
+		}
+		if (pbit == 1) {
+			printf("    This bit will be protected and become non-writable.\n");
+		}
+		printf("    Write 1 to OTPSTRAP[%X] OPTION[%X], that value becomes from %d to %d.\n", i, otpstrap[i].writeable_option + 1, otpstrap[i].value, otpstrap[i].value ^ 1);
+	}
+	if (fail == 1)
+		return OTP_FAILURE;
+	else if (skip == 1)
+		return OTP_PROG_SKIP;
+
+	return 0;
+}
+
+static int otp_print_strap(int start, int count)
+{
+	int i, j;
+	struct otpstrap_status otpstrap[64];
+
+	if (start < 0 || start > 64)
+		return OTP_USAGE;
+
+	if ((start + count) < 0 || (start + count) > 64)
+		return OTP_USAGE;
+
+	otp_strap_status(otpstrap);
+
+	printf("BIT(hex)  Value  Option           Status\n");
+	printf("___________________________________________________________________________\n");
+
+	for (i = start; i < start + count; i++) {
+		printf("0x%-8X", i);
+		printf("%-7d", otpstrap[i].value);
+		for (j = 0; j < 7; j++)
+			printf("%d ", otpstrap[i].option_array[j]);
+		printf("   ");
+		if (otpstrap[i].protected == 1) {
+			printf("protected and not writable");
+		} else {
+			printf("not protected ");
+			if (otpstrap[i].remain_times == 0) {
+				printf("and no remaining times to write.");
+			} else {
+				printf("and still can write %d times", otpstrap[i].remain_times);
+			}
+		}
+		printf("\n");
+	}
+
+	return OTP_SUCCESS;
+}
+
+static int otp_prog_strap(uint32_t *buf)
+{
+	int i, j;
+	uint32_t *strap_keep = buf + 2;
+	uint32_t *strap_protect = buf + 4;
 	uint32_t prog_bit, prog_address;
 	int bit, pbit, kbit, offset;
 	int fail = 0;
-	int pass, soak;
-	struct otpstrap otpstrap[64];
+	int pass = 0;
+	int soak = 0;
+	struct otpstrap_status otpstrap[64];
 
-	otp_strp_status(otpstrap);
+	printf("Read OTP Strap Region:\n");
+	otp_strap_status(otpstrap);
+
+	printf("Check writable...\n");
+	if (otp_strap_image_confirm(buf) == OTP_FAILURE) {
+		printf("Input image can't program into OTP, please check.\n");
+		return OTP_FAILURE;
+	}
 
-	otp_write(0x3000, 0x4061); // Write MRA
-	otp_write(0x5000, 0x302f); // Write MRB
-	otp_write(0x1000, 0x4020); // Write MR
+	otp_soak(0);
 	for (i = 0; i < 64; i++) {
+		printProgress(i + 1, 64, "");
 		prog_address = 0x800;
 		if (i < 32) {
 			offset = i;
@@ -682,33 +1446,29 @@
 			fail = 1;
 			continue;
 		}
+
+		if (soak) {
+			soak = 0;
+			otp_soak(0);
+		}
+
+		otp_prog(prog_address, prog_bit);
+
 		pass = 0;
-		soak = 0;
-		otp_write(0x3000, 0x4061); // Write MRA
-		otp_write(0x5000, 0x302f); // Write MRB
-		otp_write(0x1000, 0x4020); // Write MR
-		writel(0x04190760, 0x1e602008); //normal program
+
 		for (j = 0; j < RETRY; j++) {
-			if (!soak) {
-				otp_prog(prog_address, prog_bit);
-				if (prog_verify(prog_address, offset, 1) == 0) {
-					pass = 1;
-					break;
-				}
-				soak = 1;
-				otp_write(0x3000, 0x4021); // Write MRA
-				otp_write(0x5000, 0x1027); // Write MRB
-				otp_write(0x1000, 0x4820); // Write MR
-				writel(0x041930d4, 0x1e602008); //soak program
-			}
-			otp_prog(prog_address, prog_bit);
-			if (prog_verify(prog_address, offset, 1) == 0) {
+			if (verify_bit(prog_address, offset, 1) == 0) {
 				pass = 1;
 				break;
 			}
+			if (soak == 0) {
+				soak = 1;
+				otp_soak(1);
+			}
+			otp_prog(prog_address, prog_bit);
 		}
 		if (!pass)
-			return -1;
+			return OTP_FAILURE;
 
 		if (pbit == 0)
 			continue;
@@ -718,249 +1478,671 @@
 		else
 			prog_address |= 0x60e;
 
+
+		if (soak) {
+			soak = 0;
+			otp_soak(0);
+		}
+
+		otp_prog(prog_address, prog_bit);
+
+		pass = 0;
+
 		for (j = 0; j < RETRY; j++) {
-			if (!soak) {
-				writel(0x04190760, 0x1e602008); //normal program
-				otp_prog(prog_address, prog_bit);
-				if (prog_verify(prog_address, offset, 1) == 0) {
-					pass = 1;
-					break;
-				}
-				soak = 1;
-			}
-			writel(0x041930d4, 0x1e602008); //soak program
-			otp_prog(prog_address, prog_bit);
-			if (prog_verify(prog_address, offset, 1) == 0) {
+
+			if (verify_bit(prog_address, offset, 1) == 0) {
 				pass = 1;
 				break;
 			}
+			if (soak == 0) {
+				soak = 1;
+				otp_soak(1);
+			}
+			otp_prog(prog_address, prog_bit);
 		}
 		if (!pass)
-			return -1;
+			return OTP_FAILURE;
 
 	}
 	if (fail == 1)
-		return -1;
+		return OTP_FAILURE;
 	else
-		return 0;
+		return OTP_SUCCESS;
 
 }
 
-static int otp_prog_data(uint32_t *buf, int otp_addr, int dw_count)
+static void otp_prog_bit(uint32_t value, uint32_t prog_address, uint32_t bit_offset, int soak)
 {
-	int i, j, k, bit_value;
-	int pass, soak;
-	uint32_t prog_bit, prog_address;
+	int prog_bit;
 
-	for (i = 0; i < dw_count; i++) {
-		prog_address = i + otp_addr;
-		for (j = 0; j < 32; j++) {
-			bit_value = (buf[i] >> j) & 0x1;
-			if (prog_address % 2 == 0) {
-				prog_address |= 1 << 15;
-				if (bit_value)
-					prog_bit = ~(0x1 << j);
-				else
-					continue;
+	otp_soak(soak);
+
+	if (prog_address % 2 == 0) {
+		if (value)
+			prog_bit = ~(0x1 << bit_offset);
+		else
+			return;
+	} else {
+		prog_address |= 1 << 15;
+		if (!value)
+			prog_bit = 0x1 << bit_offset;
+		else
+			return;
+	}
+	otp_prog(prog_address, prog_bit);
+}
+
+static int otp_prog_data(uint32_t *buf)
+{
+	int i, k;
+	int pass;
+	int soak = 0;
+	uint32_t prog_address;
+	uint32_t data[2048];
+	uint32_t compare[2];
+	uint32_t *buf_keep = &buf[2048];
+
+	uint32_t data0_masked;
+	uint32_t data1_masked;
+	uint32_t buf0_masked;
+	uint32_t buf1_masked;
+
+	printf("Read OTP Data:\n");
+
+	printProgress(0, 2048, "");
+	for (i = 0; i < 2048 ; i += 2) {
+		printProgress(i + 2, 2048, "");
+		otp_read_data(i, &data[i]);
+	}
+
+
+	printf("Check writable...\n");
+	for (i = 0; i < 2048; i++) {
+		data0_masked = data[i]  & ~buf_keep[i];
+		buf0_masked  = buf[i] & ~buf_keep[i];
+		if (data0_masked == buf0_masked)
+			continue;
+		if (i % 2 == 0) {
+			if ((data0_masked | buf0_masked) == buf0_masked) {
+				continue;
 			} else {
-				prog_address |= 1 << 15;
-				// printf("bit_value = %x\n", bit_value);
-				if (bit_value)
-					continue;
-				else
-					prog_bit = 0x1 << j;
+				printf("Input image can't program into OTP, please check.\n");
+				printf("OTP_ADDR[%x] = %x\n", i, data[i]);
+				printf("Input   [%x] = %x\n", i, buf[i]);
+				printf("Mask    [%x] = %x\n", i, ~buf_keep[i]);
+				return OTP_FAILURE;
 			}
-			pass = 0;
+		} else {
+			if ((data0_masked & buf0_masked) == buf0_masked) {
+				continue;
+			} else {
+				printf("Input image can't program into OTP, please check.\n");
+				printf("OTP_ADDR[%x] = %x\n", i, data[i]);
+				printf("Input   [%x] = %x\n", i, buf[i]);
+				printf("Mask    [%x] = %x\n", i, ~buf_keep[i]);
+				return OTP_FAILURE;
+			}
+		}
+	}
+
+	printf("Start Programing...\n");
+	printProgress(0, 2048, "");
+
+	for (i = 0; i < 2048; i += 2) {
+		prog_address = i;
+		data0_masked = data[i]  & ~buf_keep[i];
+		buf0_masked  = buf[i] & ~buf_keep[i];
+		data1_masked = data[i + 1]  & ~buf_keep[i + 1];
+		buf1_masked  = buf[i + 1] & ~buf_keep[i + 1];
+		if ((data0_masked == buf0_masked) && (data1_masked == buf1_masked)) {
+			printProgress(i + 2, 2048, "[%03X]=%08X HIT;[%03X]=%08X HIT", prog_address, buf[i], prog_address + 1, buf[i + 1]);
+			continue;
+		}
+		if (soak) {
 			soak = 0;
-			otp_write(0x3000, 0x4061); // Write MRA
-			otp_write(0x5000, 0x302f); // Write MRB
-			otp_write(0x1000, 0x4020); // Write MR
-			writel(0x04190760, 0x1e602008); //normal program
-			for (k = 0; k < RETRY; k++) {
-				if (!soak) {
-					// printf("prog_address = %x\n", prog_address);
-					// printf("prog_bit = %x\n", prog_bit);
-					otp_prog(prog_address, prog_bit);
-					if (prog_verify(prog_address, j, bit_value) == 0) {
-						pass = 1;
-						break;
-					}
+			otp_soak(0);
+		}
+		if (data1_masked == buf1_masked) {
+			printProgress(i + 2, 2048, "[%03X]=%08X    ;[%03X]=%08X HIT", prog_address, buf[i], prog_address + 1, buf[i + 1]);
+			otp_prog_dw(buf[i], buf_keep[i], prog_address);
+		} else if (data0_masked == buf0_masked) {
+			printProgress(i + 2, 2048, "[%03X]=%08X HIT;[%03X]=%08X    ", prog_address, buf[i], prog_address + 1, buf[i + 1]);
+			otp_prog_dw(buf[i + 1], buf_keep[i + 1], prog_address + 1);
+		} else {
+			printProgress(i + 2, 2048, "[%03X]=%08X    ;[%03X]=%08X    ", prog_address, buf[i], prog_address + 1, buf[i + 1]);
+			otp_prog_dw(buf[i], buf_keep[i], prog_address);
+			otp_prog_dw(buf[i + 1], buf_keep[i + 1], prog_address + 1);
+		}
+
+		pass = 0;
+		for (k = 0; k < RETRY; k++) {
+			if (verify_dw(prog_address, &buf[i], &buf_keep[i], compare, 2) != 0) {
+				if (soak == 0) {
 					soak = 1;
-					otp_write(0x3000, 0x4021); // Write MRA
-					otp_write(0x5000, 0x1027); // Write MRB
-					otp_write(0x1000, 0x4820); // Write MR
-					writel(0x041930d4, 0x1e602008); //soak program
+					otp_soak(1);
+				}
+				if (compare[0] != 0) {
+					otp_prog_dw(compare[0], buf_keep[i], prog_address);
 				}
-				otp_prog(prog_address, prog_bit);
-				if (prog_verify(prog_address, j, bit_value) == 0) {
-					pass = 1;
-					break;
+				if (compare[1] != ~0) {
+					otp_prog_dw(compare[1], buf_keep[i], prog_address + 1);
 				}
+			} else {
+				pass = 1;
+				break;
 			}
-			if (!pass)
-				return -1;
 		}
+
+		if (!pass)
+			return OTP_FAILURE;
 	}
-	return 0;
+	return OTP_SUCCESS;
+
 }
 
-static int do_otp_prog(int mode, int addr, int otp_addr, int dw_count, int nconfirm)
+static int do_otp_prog(int addr, int byte_size, int nconfirm)
 {
 	int ret;
+	int mode = 0;
+	int image_version = 0;
 	uint32_t *buf;
+	uint32_t *data_region = NULL;
+	uint32_t *conf_region = NULL;
+	uint32_t *strap_region = NULL;
 
-	buf = map_physmem(addr, dw_count * 4, MAP_WRBACK);
+	buf = map_physmem(addr, byte_size, MAP_WRBACK);
 	if (!buf) {
 		puts("Failed to map physical memory\n");
-		return 1;
+		return OTP_FAILURE;
 	}
+
+	image_version = buf[0] & 0x3;
+	if (image_version != info_cb.version) {
+		puts("Version is not match\n");
+		return OTP_FAILURE;
+	}
+
+	if (buf[0] & BIT(29)) {
+		mode |= OTP_REGION_DATA;
+		data_region = &buf[36];
+	}
+	if (buf[0] & BIT(30)) {
+		mode |= OTP_REGION_CONF;
+		conf_region = &buf[12];
+	}
+	if (buf[0] & BIT(31)) {
+		mode |= OTP_REGION_STRAP;
+		strap_region = &buf[4];
+	}
+
 	if (!nconfirm) {
-		if (mode == MODE_CONF) {
-			if (otp_conf_parse(buf) < 0) {
-				printf("OTP config error, please check.\n");
-				return -1;
-			}
-		} else if (mode == MODE_DATA) {
-			if (otp_data_parse(buf, dw_count) < 0) {
+		if (mode & OTP_REGION_DATA) {
+			printf("\nOTP data region :\n");
+			if (otp_print_data_info(data_region) < 0) {
 				printf("OTP data error, please check.\n");
-				return -1;
+				return OTP_FAILURE;
 			}
-		} else if (mode == MODE_STRAP) {
-			if (otp_strap_parse(buf) < 0) {
+		}
+		if (mode & OTP_REGION_STRAP) {
+			printf("\nOTP strap region :\n");
+			if (otp_print_strap_image(strap_region) < 0) {
 				printf("OTP strap error, please check.\n");
-				return -1;
+				return OTP_FAILURE;
 			}
-		} else if (mode == MODE_ALL) {
-			if (otp_conf_parse(buf) < 0) {
+		}
+		if (mode & OTP_REGION_CONF) {
+			printf("\nOTP configuration region :\n");
+			if (otp_print_conf_image(conf_region) < 0) {
 				printf("OTP config error, please check.\n");
-				return -1;
-			}
-			if (otp_strap_parse(&buf[12]) < 0) {
-				printf("OTP strap error, please check.\n");
-				return -1;
-			}
-			if (otp_data_parse(&buf[18], dw_count - 18) < 0) {
-				printf("OTP data error, please check.\n");
-				return -1;
+				return OTP_FAILURE;
 			}
 		}
+
 		printf("type \"YES\" (no quotes) to continue:\n");
 		if (!confirm_yesno()) {
 			printf(" Aborting\n");
-			return 1;
+			return OTP_FAILURE;
 		}
 	}
-	if (mode == MODE_CONF) {
-		return otp_prog_conf(buf, otp_addr, dw_count);
-	} else if (mode == MODE_STRAP) {
-		return otp_prog_strap(buf);
-	} else if (mode == MODE_DATA) {
-		return otp_prog_data(buf, otp_addr, dw_count);
-	} else if (mode == MODE_ALL) {
-		printf("programing data region ... ");
-		ret = otp_prog_data(&buf[16], 0, dw_count - 18);
-		if (ret < 0) {
+
+	if (mode & OTP_REGION_DATA) {
+		printf("programing data region ...\n");
+		ret = otp_prog_data(data_region);
+		if (ret != 0) {
 			printf("Error\n");
 			return ret;
 		} else {
 			printf("Done\n");
 		}
-		printf("programing strap region ... ");
-		ret = otp_prog_strap(&buf[12]);
-		if (ret < 0) {
+	}
+	if (mode & OTP_REGION_STRAP) {
+		printf("programing strap region ...\n");
+		ret = otp_prog_strap(strap_region);
+		if (ret != 0) {
 			printf("Error\n");
 			return ret;
 		} else {
 			printf("Done\n");
 		}
-		printf("programing configuration region ... ");
-		ret = otp_prog_conf(buf, 0, 12);
-		if (ret < 0) {
+	}
+	if (mode & OTP_REGION_CONF) {
+		printf("programing configuration region ...\n");
+		ret = otp_prog_conf(conf_region);
+		if (ret != 0) {
 			printf("Error\n");
 			return ret;
 		}
 		printf("Done\n");
-		return ret;
 	}
-	return 0;
+
+	return OTP_SUCCESS;
 }
-static int do_ast_otp(cmd_tbl_t *cmdtp, int flag, int argc,
-		      char *const argv[])
+
+static int do_otp_prog_bit(int mode, int otp_dw_offset, int bit_offset, int value, int nconfirm)
 {
-	char *cmd;
-	int mode = 0;
-	int nconfirm = 0;
-	uint32_t addr, dw_count, otp_addr;
+	uint32_t read[2];
+	uint32_t strap_buf[6];
+	uint32_t prog_address = 0;
+	struct otpstrap_status otpstrap[64];
+	int otp_bit;
+	int i;
+	int pass;
+	int ret;
+
+	switch (mode) {
+	case OTP_REGION_CONF:
+		otp_read_config(otp_dw_offset, read);
+		prog_address = 0x800;
+		prog_address |= (otp_dw_offset / 8) * 0x200;
+		prog_address |= (otp_dw_offset % 8) * 0x2;
+		otp_bit = (read[0] >> bit_offset) & 0x1;
+		if (otp_bit == value) {
+			printf("OTPCFG%X[%X] = %d\n", otp_dw_offset, bit_offset, value);
+			printf("No need to program\n");
+			return OTP_SUCCESS;
+		}
+		if (otp_bit == 1 && value == 0) {
+			printf("OTPCFG%X[%X] = 1\n", otp_dw_offset, bit_offset);
+			printf("OTP is programed, which can't be clean\n");
+			return OTP_FAILURE;
+		}
+		printf("Program OTPCFG%X[%X] to 1\n", otp_dw_offset, bit_offset);
+		break;
+	case OTP_REGION_DATA:
+		prog_address = otp_dw_offset;
+
+		if (otp_dw_offset % 2 == 0) {
+			otp_read_data(otp_dw_offset, read);
+			otp_bit = (read[0] >> bit_offset) & 0x1;
+		} else {
+			otp_read_data(otp_dw_offset - 1, read);
+			otp_bit = (read[1] >> bit_offset) & 0x1;
+		}
+		if (otp_bit == value) {
+			printf("OTPDATA%X[%X] = %d\n", otp_dw_offset, bit_offset, value);
+			printf("No need to program\n");
+			return OTP_SUCCESS;
+		}
+		if (otp_bit == 1 && value == 0) {
+			printf("OTPDATA%X[%X] = 1\n", otp_dw_offset, bit_offset);
+			printf("OTP is programed, which can't be clean\n");
+			return OTP_FAILURE;
+		}
+		printf("Program OTPDATA%X[%X] to 1\n", otp_dw_offset, bit_offset);
+		break;
+	case OTP_REGION_STRAP:
+		otp_strap_status(otpstrap);
+		otp_print_strap(bit_offset, 1);
+		if (bit_offset < 32) {
+			strap_buf[0] = value << bit_offset;
+			strap_buf[2] = ~BIT(bit_offset);
+			strap_buf[3] = ~0;
+			strap_buf[5] = 0;
+			// if (protect)
+			// 	strap_buf[4] = BIT(bit_offset);
+			// else
+			// 	strap_buf[4] = 0;
+		} else {
+			strap_buf[1] = value << (bit_offset - 32);
+			strap_buf[2] = ~0;
+			strap_buf[3] = ~BIT(bit_offset - 32);
+			strap_buf[4] = 0;
+			// if (protect)
+			// 	strap_buf[5] = BIT(bit_offset - 32);
+			// else
+			// 	strap_buf[5] = 0;
+		}
+		ret = otp_strap_image_confirm(strap_buf);
+		if (ret == OTP_FAILURE)
+			return OTP_FAILURE;
+		else if (ret == OTP_PROG_SKIP)
+			return OTP_SUCCESS;
+
+		break;
+	}
+
+	if (!nconfirm) {
+		printf("type \"YES\" (no quotes) to continue:\n");
+		if (!confirm_yesno()) {
+			printf(" Aborting\n");
+			return OTP_FAILURE;
+		}
+	}
+
+	switch (mode) {
+	case OTP_REGION_STRAP:
+		return otp_prog_strap(strap_buf);
+	case OTP_REGION_CONF:
+	case OTP_REGION_DATA:
+		otp_prog_bit(value, prog_address, bit_offset, 0);
+		pass = -1;
+		for (i = 0; i < RETRY; i++) {
+			if (verify_bit(prog_address, bit_offset, value) != 0) {
+				otp_prog_bit(value, prog_address, bit_offset, 1);
+			} else {
+				pass = 0;
+				break;
+			}
+		}
+		if (pass == 0)
+			return OTP_SUCCESS;
+	}
 
+	return OTP_USAGE;
+}
 
+static int do_otpread(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+{
+	uint32_t offset, count;
+	int ret;
 
-	if (argc < 2) {
-usage:
+	if (argc == 4) {
+		offset = simple_strtoul(argv[2], NULL, 16);
+		count = simple_strtoul(argv[3], NULL, 16);
+	} else if (argc == 3) {
+		offset = simple_strtoul(argv[2], NULL, 16);
+		count = 1;
+	} else {
 		return CMD_RET_USAGE;
 	}
 
-	cmd = argv[1];
-	if (!strcmp(cmd, "read")) {
-		if (!strcmp(argv[2], "conf"))
-			mode = MODE_CONF;
-		else if (!strcmp(argv[2], "data"))
-			mode = MODE_DATA;
-		else if (!strcmp(argv[2], "strap"))
-			mode = MODE_STRAP;
-		else
-			goto usage;
 
+	if (!strcmp(argv[1], "conf")) {
 		writel(OTP_PASSWD, 0x1e6f2000); //password
-		otp_addr = simple_strtoul(argv[3], NULL, 16);
-		dw_count = simple_strtoul(argv[4], NULL, 16);
-		if (mode == MODE_CONF) {
-			otp_print_config(otp_addr, dw_count);
-		} else if (mode == MODE_DATA) {
-			otp_print_data(otp_addr, dw_count);
-		} else if (mode == MODE_STRAP) {
-			otp_print_strap();
-		}
-	} else if (!strcmp(cmd, "prog")) {
-		if (!strcmp(argv[2], "conf"))
-			mode = MODE_CONF;
-		else if (!strcmp(argv[2], "strap"))
-			mode = MODE_STRAP;
-		else if (!strcmp(argv[2], "data"))
-			mode = MODE_DATA;
-		else if (!strcmp(argv[2], "all"))
-			mode = MODE_ALL;
-		else
-			goto usage;
-
-		if (!strcmp(argv[3], "f"))
-			nconfirm = 1;
+		ret = otp_print_config(offset, count);
+	} else if (!strcmp(argv[1], "data")) {
 		writel(OTP_PASSWD, 0x1e6f2000); //password
-		addr = simple_strtoul(argv[3 + nconfirm], NULL, 16);
-		otp_addr = simple_strtoul(argv[4 + nconfirm], NULL, 16);
-		dw_count = simple_strtoul(argv[5 + nconfirm], NULL, 16);
-		return do_otp_prog(mode, addr, otp_addr, dw_count, nconfirm);
-	} else if (!strcmp(cmd, "comp")) {
+		ret = otp_print_data(offset, count);
+	} else if (!strcmp(argv[1], "strap")) {
 		writel(OTP_PASSWD, 0x1e6f2000); //password
+		ret = otp_print_strap(offset, count);
+	} else {
+		return CMD_RET_USAGE;
+	}
+
+	if (ret == OTP_SUCCESS)
+		return CMD_RET_SUCCESS;
+	else
+		return CMD_RET_USAGE;
+
+}
+
+static int do_otpprog(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+{
+	phys_addr_t addr;
+	uint32_t byte_size;
+	int ret;
+
+	if (argc == 4) {
+		if (strcmp(argv[1], "f"))
+			return CMD_RET_USAGE;
 		addr = simple_strtoul(argv[2], NULL, 16);
-		otp_addr = simple_strtoul(argv[3], NULL, 16);
-		if (otp_compare(otp_addr, addr) >= 0) {
-			printf("Compare pass\n");
+		byte_size = simple_strtoul(argv[3], NULL, 16);
+		writel(OTP_PASSWD, 0x1e6f2000); //password
+		ret = do_otp_prog(addr, byte_size, 1);
+	} else if (argc == 3) {
+		addr = simple_strtoul(argv[1], NULL, 16);
+		byte_size = simple_strtoul(argv[2], NULL, 16);
+		writel(OTP_PASSWD, 0x1e6f2000); //password
+		ret = do_otp_prog(addr, byte_size, 0);
+	} else {
+		return CMD_RET_USAGE;
+	}
+
+	if (ret == OTP_SUCCESS)
+		return CMD_RET_SUCCESS;
+	else if (ret == OTP_FAILURE)
+		return CMD_RET_FAILURE;
+	else
+		return CMD_RET_USAGE;
+}
+
+static int do_otppb(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+{
+	int mode = 0;
+	int nconfirm = 0;
+	int otp_addr = 0;
+	int bit_offset;
+	int value;
+	int ret;
+
+	if (argc != 4 && argc != 5 && argc != 6)
+		return CMD_RET_USAGE;
+
+	/* Drop the pb cmd */
+	argc--;
+	argv++;
+
+	if (!strcmp(argv[0], "conf"))
+		mode = OTP_REGION_CONF;
+	else if (!strcmp(argv[0], "strap"))
+		mode = OTP_REGION_STRAP;
+	else if (!strcmp(argv[0], "data"))
+		mode = OTP_REGION_DATA;
+	else
+		return CMD_RET_USAGE;
+
+	/* Drop the region cmd */
+	argc--;
+	argv++;
+
+	if (!strcmp(argv[0], "f")) {
+		nconfirm = 1;
+		/* Drop the force option */
+		argc--;
+		argv++;
+	}
+
+	if (mode == OTP_REGION_STRAP) {
+		bit_offset = simple_strtoul(argv[0], NULL, 16);
+		value = simple_strtoul(argv[1], NULL, 16);
+		if (bit_offset >= 64)
+			return CMD_RET_USAGE;
+	} else {
+		otp_addr = simple_strtoul(argv[0], NULL, 16);
+		bit_offset = simple_strtoul(argv[1], NULL, 16);
+		value = simple_strtoul(argv[2], NULL, 16);
+		if (bit_offset >= 32)
+			return CMD_RET_USAGE;
+	}
+	if (value != 0 && value != 1)
+		return CMD_RET_USAGE;
+
+	writel(OTP_PASSWD, 0x1e6f2000); //password
+	ret = do_otp_prog_bit(mode, otp_addr, bit_offset, value, nconfirm);
+
+	if (ret == OTP_SUCCESS)
+		return CMD_RET_SUCCESS;
+	else if (ret == OTP_FAILURE)
+		return CMD_RET_FAILURE;
+	else
+		return CMD_RET_USAGE;
+}
+
+static int do_otpcmp(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+{
+	phys_addr_t addr;
+	int otp_addr = 0;
+
+	if (argc != 3)
+		return CMD_RET_USAGE;
+
+	writel(OTP_PASSWD, 0x1e6f2000); //password
+	addr = simple_strtoul(argv[1], NULL, 16);
+	otp_addr = simple_strtoul(argv[2], NULL, 16);
+	if (otp_compare(otp_addr, addr) == 0) {
+		printf("Compare pass\n");
+		return CMD_RET_SUCCESS;
+	} else {
+		printf("Compare fail\n");
+		return CMD_RET_FAILURE;
+	}
+}
+
+static int do_otpinfo(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+{
+	int view = 0;
+	int input;
+
+	if (argc != 2 && argc != 3)
+		return CMD_RET_USAGE;
+
+	if (!strcmp(argv[1], "conf")) {
+
+		writel(OTP_PASSWD, 0x1e6f2000); //password
+		if (argc == 3) {
+			input = simple_strtoul(argv[2], NULL, 16);
+			otp_print_conf_info(input);
 		} else {
-			printf("Compare fail\n");
+			otp_print_conf_info(-1);
+		}
+	} else if (!strcmp(argv[1], "strap")) {
+		if (!strcmp(argv[2], "v")) {
+			view = 1;
+			/* Drop the view option */
+			argc--;
+			argv++;
 		}
+		writel(OTP_PASSWD, 0x1e6f2000); //password
+		otp_print_strap_info(view);
 	} else {
-		goto usage;
+		return CMD_RET_USAGE;
 	}
 
+	return CMD_RET_SUCCESS;
+}
+
+static int do_otpprotect(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+{
+	int input;
+	int bit_offset;
+	int prog_address;
+	int pass;
+	int i;
+	if (argc != 3 && argc != 2)
+		return CMD_RET_USAGE;
+
+	if (!strcmp(argv[0], "f")) {
+		input = simple_strtoul(argv[2], NULL, 16);
+	} else {
+		input = simple_strtoul(argv[1], NULL, 16);
+		printf("OTPSTRAP[%d] will be protected\n", input);
+		printf("type \"YES\" (no quotes) to continue:\n");
+		if (!confirm_yesno()) {
+			printf(" Aborting\n");
+			return CMD_RET_FAILURE;
+		}
+	}
+
+	prog_address = 0x800;
+	if (input < 32) {
+		bit_offset = input;
+		prog_address |= 0x60c;
+	} else if (input < 64) {
+		bit_offset = input - 32;
+		prog_address |= 0x60e;
+	} else {
+		return CMD_RET_USAGE;
+	}
+
+	if (verify_bit(prog_address, bit_offset, 1) == 0) {
+		printf("OTPSTRAP[%d] already protected\n", input);
+	}
+	otp_prog_bit(1, prog_address, bit_offset, 0);
+	pass = -1;
+	for (i = 0; i < RETRY; i++) {
+		if (verify_bit(prog_address, bit_offset, 1) != 0) {
+			otp_prog_bit(1, prog_address, bit_offset, 1);
+		} else {
+			pass = 0;
+			break;
+		}
+	}
+	if (pass == 0) {
+		printf("OTPSTRAP[%d] is protected\n", input);
+		return CMD_RET_SUCCESS;
+	}
+
+	printf("Protect OTPSTRAP[%d] fail\n", input);
+	return CMD_RET_FAILURE;
 
-	return 0;
 }
 
+static cmd_tbl_t cmd_otp[] = {
+	U_BOOT_CMD_MKENT(read, 4, 0, do_otpread, "", ""),
+	U_BOOT_CMD_MKENT(info, 3, 0, do_otpinfo, "", ""),
+	U_BOOT_CMD_MKENT(prog, 4, 0, do_otpprog, "", ""),
+	U_BOOT_CMD_MKENT(pb, 6, 0, do_otppb, "", ""),
+	U_BOOT_CMD_MKENT(protect, 3, 0, do_otpprotect, "", ""),
+	U_BOOT_CMD_MKENT(cmp, 3, 0, do_otpcmp, "", ""),
+};
+
+static int do_ast_otp(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+{
+	cmd_tbl_t *cp;
+
+	cp = find_cmd_tbl(argv[1], cmd_otp, ARRAY_SIZE(cmd_otp));
+
+	/* Drop the otp command */
+	argc--;
+	argv++;
+
+	if (cp == NULL || argc > cp->maxargs)
+		return CMD_RET_USAGE;
+	if (flag == CMD_FLAG_REPEAT && !cmd_is_repeatable(cp))
+		return CMD_RET_SUCCESS;
+
+	if (chip_version() == 0) {
+		info_cb.version = 0;
+		info_cb.conf_info = a0_conf_info;
+		info_cb.conf_info_len = ARRAY_SIZE(a0_conf_info);
+		info_cb.strap_info = a0_strap_info;
+		info_cb.strap_info_len = ARRAY_SIZE(a0_strap_info);
+		info_cb.key_info = a0_key_type;
+		info_cb.key_info_len = ARRAY_SIZE(a0_key_type);
+	} else if (chip_version() == 1) {
+		info_cb.version = 1;
+		info_cb.conf_info = a1_conf_info;
+		info_cb.conf_info_len = ARRAY_SIZE(a1_conf_info);
+		info_cb.strap_info = a1_strap_info;
+		info_cb.strap_info_len = ARRAY_SIZE(a1_strap_info);
+		info_cb.key_info = a1_key_type;
+		info_cb.key_info_len = ARRAY_SIZE(a1_key_type);
+	}
+
+	return cp->cmd(cmdtp, flag, argc, argv);
+}
 
 U_BOOT_CMD(
 	otp, 7, 0,  do_ast_otp,
 	"ASPEED One-Time-Programmable sub-system",
-	"read conf|strap|data <otp_addr> <dw_count>\n"
-	"otp prog conf|strap|data|all [f] <addr> <otp_addr> <dw_count>\n"
-	"otp comp <addr> <otp_addr>"
+	"read conf|data <otp_dw_offset> <dw_count>\n"
+	"otp read strap <strap_bit_offset> <bit_count>\n"
+	"otp info strap [v]\n"
+	"otp info conf [otp_dw_offset]\n"
+	"otp prog [f] <addr> <byte_size>\n"
+	"otp pb conf|data [f] <otp_dw_offset> <bit_offset> <value>\n"
+	"otp pb strap [f] <bit_offset> <value>\n"
+	"otp protect [f] <bit_offset>\n"
+	"otp cmp <addr> <otp_dw_offset>\n"
 );
diff -Naur uboot/include/uboot_aes.h uboot.new/include/uboot_aes.h
--- uboot/include/uboot_aes.h	2019-07-23 10:57:54.000000000 +0800
+++ uboot.new/include/uboot_aes.h	2020-06-23 09:52:33.181511667 +0800
@@ -18,16 +18,24 @@
  * AES encryption library, with small code size, supporting only 128-bit AES
  *
  * AES is a stream cipher which works a block at a time, with each block
- * in this case being AES_KEY_LENGTH bytes.
+ * in this case being AES_BLOCK_LENGTH bytes.
  */
 
 enum {
 	AES_STATECOLS	= 4,	/* columns in the state & expanded key */
-	AES_KEYCOLS	= 4,	/* columns in a key */
-	AES_ROUNDS	= 10,	/* rounds in encryption */
-
-	AES_KEY_LENGTH	= 128 / 8,
-	AES_EXPAND_KEY_LENGTH	= 4 * AES_STATECOLS * (AES_ROUNDS + 1),
+	AES128_KEYCOLS  = 4,    /* columns in a key for aes128 */
+	AES192_KEYCOLS  = 6,    /* columns in a key for aes128 */
+	AES256_KEYCOLS  = 8,    /* columns in a key for aes128 */
+	AES128_ROUNDS   = 10,   /* rounds in encryption for aes128 */
+	AES192_ROUNDS   = 12,   /* rounds in encryption for aes192 */
+	AES256_ROUNDS   = 14,   /* rounds in encryption for aes256 */
+	AES128_KEY_LENGTH       = 128 / 8,
+	AES192_KEY_LENGTH       = 192 / 8,
+	AES256_KEY_LENGTH       = 256 / 8,
+	AES128_EXPAND_KEY_LENGTH = 4 * AES_STATECOLS * (AES128_ROUNDS + 1),
+	AES192_EXPAND_KEY_LENGTH = 4 * AES_STATECOLS * (AES192_ROUNDS + 1),
+	AES256_EXPAND_KEY_LENGTH = 4 * AES_STATECOLS * (AES256_ROUNDS + 1),
+	AES_BLOCK_LENGTH        = 128 / 8,
 };
 
 /**
@@ -39,30 +47,32 @@
  * @key		Key, of length AES_KEY_LENGTH bytes
  * @expkey	Buffer to place expanded key, AES_EXPAND_KEY_LENGTH
  */
-void aes_expand_key(u8 *key, u8 *expkey);
+void aes_expand_key(u8 *key, u32 key_size, u8 *expkey);
 
 /**
  * aes_encrypt() - Encrypt single block of data with AES 128
  *
+ * @key_size   Size of the aes key (in bits)
  * @in		Input data
  * @expkey	Expanded key to use for encryption (from aes_expand_key())
  * @out		Output data
  */
-void aes_encrypt(u8 *in, u8 *expkey, u8 *out);
+void aes_encrypt(u32 key_size, u8 *in, u8 *expkey, u8 *out);
 
 /**
  * aes_decrypt() - Decrypt single block of data with AES 128
  *
+ * @key_size   Size of the aes key (in bits)
  * @in		Input data
  * @expkey	Expanded key to use for decryption (from aes_expand_key())
  * @out		Output data
  */
-void aes_decrypt(u8 *in, u8 *expkey, u8 *out);
+void aes_decrypt(u32 key_size, u8 *in, u8 *expkey, u8 *out);
 
 /**
  * Apply chain data to the destination using EOR
  *
- * Each array is of length AES_KEY_LENGTH.
+ * Each array is of length AES_BLOCK_LENGTH.
  *
  * @cbc_chain_data	Chain data
  * @src			Source data
@@ -73,25 +83,27 @@
 /**
  * aes_cbc_encrypt_blocks() - Encrypt multiple blocks of data with AES CBC.
  *
+ * @key_size    Size of the aes key (in bits)
  * @key_exp		Expanded key to use
  * @iv			Initialization vector
  * @src			Source data to encrypt
  * @dst			Destination buffer
  * @num_aes_blocks	Number of AES blocks to encrypt
  */
-void aes_cbc_encrypt_blocks(u8 *key_exp, u8 *iv, u8 *src, u8 *dst,
+void aes_cbc_encrypt_blocks(u32 key_size, u8 *key_exp, u8 *iv, u8 *src, u8 *dst,
 			    u32 num_aes_blocks);
 
 /**
  * Decrypt multiple blocks of data with AES CBC.
  *
+ * @key_size    Size of the aes key (in bits)
  * @key_exp		Expanded key to use
  * @iv			Initialization vector
  * @src			Source data to decrypt
  * @dst			Destination buffer
  * @num_aes_blocks	Number of AES blocks to decrypt
  */
-void aes_cbc_decrypt_blocks(u8 *key_exp, u8 *iv, u8 *src, u8 *dst,
+void aes_cbc_decrypt_blocks(u32 key_size, u8 *key_exp, u8 *iv, u8 *src, u8 *dst,
 			    u32 num_aes_blocks);
 
 #endif /* _AES_REF_H_ */
diff -Naur uboot/lib/aes.c uboot.new/lib/aes.c
--- uboot/lib/aes.c	2019-07-23 10:57:54.000000000 +0800
+++ uboot.new/lib/aes.c	2020-06-23 09:52:32.389529586 +0800
@@ -508,50 +508,79 @@
 	0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
 };
 
+static u32 aes_get_rounds(u32 key_len)
+{
+   u32 rounds = AES128_ROUNDS;
+
+   if (key_len == AES192_KEY_LENGTH)
+           rounds = AES192_ROUNDS;
+   else if (key_len == AES256_KEY_LENGTH)
+           rounds = AES256_ROUNDS;
+
+   return rounds;
+}
+
+static u32 aes_get_keycols(u32 key_len)
+{
+   u32 keycols = AES128_KEYCOLS;
+
+   if (key_len == AES192_KEY_LENGTH)
+           keycols = AES192_KEYCOLS;
+   else if (key_len == AES256_KEY_LENGTH)
+           keycols = AES256_KEYCOLS;
+
+   return keycols;
+}
+
 /* produce AES_STATECOLS bytes for each round */
-void aes_expand_key(u8 *key, u8 *expkey)
+void aes_expand_key(u8 *key, u32 key_len, u8 *expkey)
 {
 	u8 tmp0, tmp1, tmp2, tmp3, tmp4;
-	u32 idx;
+	u32 idx, aes_rounds, aes_keycols;
+
+	aes_rounds = aes_get_rounds(key_len);
+	aes_keycols = aes_get_keycols(key_len);
 
-	memcpy(expkey, key, AES_KEYCOLS * 4);
+	memcpy(expkey, key, key_len);
 
-	for (idx = AES_KEYCOLS; idx < AES_STATECOLS * (AES_ROUNDS + 1); idx++) {
+	for (idx = aes_keycols; idx < AES_STATECOLS * (aes_rounds + 1); idx++) {
 		tmp0 = expkey[4*idx - 4];
 		tmp1 = expkey[4*idx - 3];
 		tmp2 = expkey[4*idx - 2];
 		tmp3 = expkey[4*idx - 1];
-		if (!(idx % AES_KEYCOLS)) {
+		if (!(idx % aes_keycols)) {
 			tmp4 = tmp3;
 			tmp3 = sbox[tmp0];
-			tmp0 = sbox[tmp1] ^ rcon[idx / AES_KEYCOLS];
+			tmp0 = sbox[tmp1] ^ rcon[idx / aes_keycols];
 			tmp1 = sbox[tmp2];
 			tmp2 = sbox[tmp4];
-		} else if ((AES_KEYCOLS > 6) && (idx % AES_KEYCOLS == 4)) {
+		} else if ((aes_keycols > 6) && (idx % aes_keycols == 4)) {
 			tmp0 = sbox[tmp0];
 			tmp1 = sbox[tmp1];
 			tmp2 = sbox[tmp2];
 			tmp3 = sbox[tmp3];
 		}
 
-		expkey[4*idx+0] = expkey[4*idx - 4*AES_KEYCOLS + 0] ^ tmp0;
-		expkey[4*idx+1] = expkey[4*idx - 4*AES_KEYCOLS + 1] ^ tmp1;
-		expkey[4*idx+2] = expkey[4*idx - 4*AES_KEYCOLS + 2] ^ tmp2;
-		expkey[4*idx+3] = expkey[4*idx - 4*AES_KEYCOLS + 3] ^ tmp3;
+			expkey[4*idx+0] = expkey[4*idx - 4*aes_keycols + 0] ^ tmp0;
+			expkey[4*idx+1] = expkey[4*idx - 4*aes_keycols + 1] ^ tmp1;
+			expkey[4*idx+2] = expkey[4*idx - 4*aes_keycols + 2] ^ tmp2;
+			expkey[4*idx+3] = expkey[4*idx - 4*aes_keycols + 3] ^ tmp3;
 	}
 }
 
 /* encrypt one 128 bit block */
-void aes_encrypt(u8 *in, u8 *expkey, u8 *out)
+void aes_encrypt(u32 key_len, u8 *in, u8 *expkey, u8 *out)
 {
 	u8 state[AES_STATECOLS * 4];
-	u32 round;
+	u32 round, aes_rounds;
+
+	aes_rounds = aes_get_rounds(key_len);
 
 	memcpy(state, in, AES_STATECOLS * 4);
 	add_round_key((u32 *)state, (u32 *)expkey);
 
-	for (round = 1; round < AES_ROUNDS + 1; round++) {
-		if (round < AES_ROUNDS)
+	for (round = 1; round < aes_rounds + 1; round++) {
+		if (round < aes_rounds)
 			mix_sub_columns(state);
 		else
 			shift_rows(state);
@@ -563,18 +592,20 @@
 	memcpy(out, state, sizeof(state));
 }
 
-void aes_decrypt(u8 *in, u8 *expkey, u8 *out)
+void aes_decrypt(u32 key_len, u8 *in, u8 *expkey, u8 *out)
 {
 	u8 state[AES_STATECOLS * 4];
-	int round;
+	int round, aes_rounds;
 
+	aes_rounds = aes_get_rounds(key_len);
+	
 	memcpy(state, in, sizeof(state));
 
 	add_round_key((u32 *)state,
-		      (u32 *)expkey + AES_ROUNDS * AES_STATECOLS);
+		      (u32 *)expkey + aes_rounds * AES_STATECOLS);
 	inv_shift_rows(state);
 
-	for (round = AES_ROUNDS; round--; ) {
+	for (round = aes_rounds; round--; ) {
 		add_round_key((u32 *)state,
 			      (u32 *)expkey + round * AES_STATECOLS);
 		if (round)
@@ -596,62 +627,62 @@
 {
 	int i;
 
-	for (i = 0; i < AES_KEY_LENGTH; i++)
+	for (i = 0; i < AES_BLOCK_LENGTH; i++)
 		*dst++ = *src++ ^ *cbc_chain_data++;
 }
 
-void aes_cbc_encrypt_blocks(u8 *key_exp, u8 *iv, u8 *src, u8 *dst,
+void aes_cbc_encrypt_blocks(u32 key_len, u8 *key_exp, u8 *iv, u8 *src, u8 *dst,
 			    u32 num_aes_blocks)
 {
-	u8 tmp_data[AES_KEY_LENGTH];
+	u8 tmp_data[AES_BLOCK_LENGTH];
 	u8 *cbc_chain_data = iv;
 	u32 i;
 
 	for (i = 0; i < num_aes_blocks; i++) {
 		debug("encrypt_object: block %d of %d\n", i, num_aes_blocks);
-		debug_print_vector("AES Src", AES_KEY_LENGTH, src);
+		debug_print_vector("AES Src", AES_BLOCK_LENGTH, src);
 
 		/* Apply the chain data */
 		aes_apply_cbc_chain_data(cbc_chain_data, src, tmp_data);
-		debug_print_vector("AES Xor", AES_KEY_LENGTH, tmp_data);
+		debug_print_vector("AES Xor", AES_BLOCK_LENGTH, tmp_data);
 
 		/* Encrypt the AES block */
-		aes_encrypt(tmp_data, key_exp, dst);
-		debug_print_vector("AES Dst", AES_KEY_LENGTH, dst);
+		aes_encrypt(key_len, tmp_data, key_exp, dst);
+		debug_print_vector("AES Dst", AES_BLOCK_LENGTH, dst);
 
 		/* Update pointers for next loop. */
 		cbc_chain_data = dst;
-		src += AES_KEY_LENGTH;
-		dst += AES_KEY_LENGTH;
+		src += AES_BLOCK_LENGTH;
+		dst += AES_BLOCK_LENGTH;
 	}
 }
 
-void aes_cbc_decrypt_blocks(u8 *key_exp, u8 *iv, u8 *src, u8 *dst,
+void aes_cbc_decrypt_blocks(u32 key_len, u8 *key_exp, u8 *iv, u8 *src, u8 *dst,
 			    u32 num_aes_blocks)
 {
-	u8 tmp_data[AES_KEY_LENGTH], tmp_block[AES_KEY_LENGTH];
+	u8 tmp_data[AES_BLOCK_LENGTH], tmp_block[AES_BLOCK_LENGTH];
 	/* Convenient array of 0's for IV */
-	u8 cbc_chain_data[AES_KEY_LENGTH];
+	u8 cbc_chain_data[AES_BLOCK_LENGTH];
 	u32 i;
 
-	memcpy(cbc_chain_data, iv, AES_KEY_LENGTH);
+	memcpy(cbc_chain_data, iv, AES_BLOCK_LENGTH);
 	for (i = 0; i < num_aes_blocks; i++) {
 		debug("encrypt_object: block %d of %d\n", i, num_aes_blocks);
-		debug_print_vector("AES Src", AES_KEY_LENGTH, src);
+		debug_print_vector("AES Src", AES_BLOCK_LENGTH, src);
 
-		memcpy(tmp_block, src, AES_KEY_LENGTH);
+		memcpy(tmp_block, src, AES_BLOCK_LENGTH);
 
 		/* Decrypt the AES block */
-		aes_decrypt(src, key_exp, tmp_data);
-		debug_print_vector("AES Xor", AES_KEY_LENGTH, tmp_data);
+		aes_decrypt(key_len, src, key_exp, tmp_data);
+		debug_print_vector("AES Xor", AES_BLOCK_LENGTH, tmp_data);
 
 		/* Apply the chain data */
 		aes_apply_cbc_chain_data(cbc_chain_data, tmp_data, dst);
-		debug_print_vector("AES Dst", AES_KEY_LENGTH, dst);
+		debug_print_vector("AES Dst", AES_BLOCK_LENGTH, dst);
 
 		/* Update pointers for next loop. */
-		memcpy(cbc_chain_data, tmp_block, AES_KEY_LENGTH);
-		src += AES_KEY_LENGTH;
-		dst += AES_KEY_LENGTH;
+		memcpy(cbc_chain_data, tmp_block, AES_BLOCK_LENGTH);
+		src += AES_BLOCK_LENGTH;
+		dst += AES_BLOCK_LENGTH;
 	}
 }
diff -Naur uboot/oem/ami/fmh/cmd_fmh.c uboot.new/oem/ami/fmh/cmd_fmh.c
--- uboot/oem/ami/fmh/cmd_fmh.c	2020-06-23 17:55:49.278919004 +0800
+++ uboot.new/oem/ami/fmh/cmd_fmh.c	2020-06-24 13:04:08.817735695 +0800
@@ -31,6 +31,13 @@
 # define  KERNEL_LOADADDR	0xC00000
 # define  KERNEL_FILE		"/boot/uImage"
 
+#ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_ENCRYPTION_SUPPORT
+# define UIMAGE_LOADADDR	(ASPEED_DRAM_BASE + 0x8000 )
+# define DTB_LOADADDR		(ASPEED_DRAM_BASE + 0x1000000 )
+# define INITRD_LOADADDR	(ASPEED_DRAM_BASE + 0x2000000 )
+# define SECURE_KEY_LOADADDR	(ASPEED_SRAM_BASE + 0x1000 ) 
+# define SECURE_IV_LOADADDR		(ASPEED_SRAM_BASE + 0x1100 ) 
+#endif
 
 # define AUTO_HIGH_VER_FW          	0x0
 # define IMAGE_1                   	0x1
@@ -959,11 +966,21 @@
     char goldenside[16];
 	char INITRDAddrStr[128] = "0xFFFFFFFF";
 	char dtsaddrstr[128] = "0xFFFFFFFF";
+#ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_ENCRYPTION_SUPPORT	
+	char lenStr[128] = "0xFFFFFFFF";
+	char INITRDLenStr[128] = "0xFFFFFFFF";
+	char dtsLenrstr[128] = "0xFFFFFFFF";	
+	char aesCMD[5][128] = {"aes.256","dec","0xFFFFFFFF","0xFFFFFFFF","0xFFFFFFFF"};
+#endif		
 	char baudrate_str[16] = {0};
 	unsigned char mod_Name[9]={0};
 	char FSName[16] = {0};  /* Hope no filesystem name is bigger then 15 char long */
 	u8 imagetoboot = IMAGE_1; /* By default will boot image-1 */
-	char *argv[6];
+#ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_ENCRYPTION_SUPPORT		
+	char *argv[7];
+#else
+	char *argv[6];	
+#endif	
 	char *s = NULL;
 	//flash_info_t *flinfo = NULL;
 	FMH	*fmh = NULL;
@@ -974,6 +991,11 @@
 	long SkipSize;
 	unsigned long ExecuteAddr = 0xFFFFFFFF;
 	unsigned long dtsaddr = 0xFFFFFFFF;
+#ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_ENCRYPTION_SUPPORT		
+	unsigned long dtslen = 0xFFFFFFFF;
+	unsigned long initrdlen = 0xFFFFFFFF;
+	unsigned long len = 0xFFFFFFFF;
+#endif	
 	unsigned short ExecuteType = MODULE_BOOTLOADER;
 	unsigned short Compression;
 	int retval = -1;
@@ -1179,16 +1201,26 @@
 				{
 					rootisinitrd = 1; //found root and it is initrd
 				}
-				RootMtdNo = MtdPartition;
+				RootMtdNo = MtdPartition;		
 				if(rootisinitrd == 0)
 				{
 					printf("Found Root File System @ /dev/mtdblock%d\n",RootMtdNo);
 				}
 				else
-				{
-					if ((fmh->FMH_Ver_Major == 1) && (fmh->FMH_Ver_Minor >= 8))
-						initrd_address = startaddress + le32_to_host(mod->Module_Location);
-					printf("Found INITRD Image for Root File System @ /dev/mtdblock%d flash address %lx\n",RootMtdNo,initrd_address);
+				{				
+					if ((fmh->FMH_Ver_Major == 1) && (fmh->FMH_Ver_Minor >= 8)){
+#ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_ENCRYPTION_SUPPORT		
+						if ( initrd_address == 0xFFFFFFFF){
+							initrdlen = le32_to_host(mod->Module_Size);
+							initrd_address = startaddress + le32_to_host(mod->Module_Location);
+							printf("Found INITRD Image for Root File System @ /dev/mtdblock%d flash address %lx\n",RootMtdNo,initrd_address);								
+						}
+#else
+						initrd_address = startaddress + le32_to_host(mod->Module_Location);						
+						printf("Found INITRD Image for Root File System @ /dev/mtdblock%d flash address %lx\n",RootMtdNo,initrd_address);								
+#endif						
+					}
+
 				}
 
  				switch (le16_to_host(mod->Module_Type))
@@ -1215,7 +1247,17 @@
                 		strncpy(FSName,"",15);
        	 		}
 			}
+#ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_ENCRYPTION_SUPPORT										
+			if (strncasecmp((char *)mod->Module_Name,"INITRD",8) == 0)
+			{
+				rootisinitrd = 1; //encrypt mode of secure boot should has initrd to luanch root					
+				RootMtdNo = MtdPartition;	
+				initrd_address =  le32_to_host(mod->Module_Location);
+				initrdlen = le32_to_host(mod->Module_Size);			
+				printf("Found Encrypt INITRD Image for Root File System @ /dev/mtdblock%d flash address %lx size %lx\n",RootMtdNo,initrd_address,initrdlen);
 
+			}
+#endif	
 			if ((fmh->FMH_Ver_Major == 1) && (fmh->FMH_Ver_Minor >= 8))
 				printf("%s @ /dev/mtdblock%d Address %lx\n",mod_Name, MtdPartition, startaddress + le32_to_host(mod->Module_Location));
 
@@ -1225,6 +1267,9 @@
 		if (le16_to_host(mod->Module_Type) == MODULE_FPGA)
 		{
 			dtsaddr = le32_to_host(mod->Module_Location);
+#ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_ENCRYPTION_SUPPORT				
+			dtslen = le32_to_host(mod->Module_Size);
+#endif			
 		}
 
 
@@ -1259,9 +1304,23 @@
 					if(rootisinitrd == 1)
 					{
 						initrd_address =  le32_to_host(mod->Module_Load_Address);
+#ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_ENCRYPTION_SUPPORT						
+						initrdlen = le32_to_host(mod->Module_Size);
+#endif						
 						printf("INITRD Image moved to 0x%lx\n",initrd_address);
 					}
 				}
+#ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_ENCRYPTION_SUPPORT										
+				if (strncasecmp((char *)mod->Module_Name,"INITRD",8) == 0)
+				{
+					if(rootisinitrd == 1)
+					{
+						initrd_address =  le32_to_host(mod->Module_Load_Address);
+						initrdlen = le32_to_host(mod->Module_Size);			
+						printf("Encrypt INITRD Image moved to 0x%lx\n",initrd_address);
+					}
+				}
+#endif							
 			}
 			else
 			{
@@ -1276,14 +1335,22 @@
 						&& 	(ExecuteAddr == 0xFFFFFFFF))
 		{
 			ExecuteType =le16_to_host(mod->Module_Type);
-			if (le16_to_host(mod->Module_Flags) & MODULE_FLAG_COPY_TO_RAM)
+			if (le16_to_host(mod->Module_Flags) & MODULE_FLAG_COPY_TO_RAM){
 				ExecuteAddr =le32_to_host(mod->Module_Load_Address);
+#ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_ENCRYPTION_SUPPORT				
+				len = le32_to_host(mod->Module_Size);
+#endif				
+			}
 			else
 			{
 				if (Compression == MODULE_COMPRESSION_NONE)
 				{
-					if ((fmh->FMH_Ver_Major == 1) && (fmh->FMH_Ver_Minor >= 8))
+					if ((fmh->FMH_Ver_Major == 1) && (fmh->FMH_Ver_Minor >= 8)){
 						ExecuteAddr = startaddress + le32_to_host(mod->Module_Location);
+#ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_ENCRYPTION_SUPPORT						
+						len = le32_to_host(mod->Module_Size);
+#endif						
+					}
 				}
 				else
 					printf("ERROR: Compressed Module cannot be XIP\n");
@@ -1441,9 +1508,57 @@
 		}
 		else
 		{
+#ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_ENCRYPTION_SUPPORT	
+			sprintf(&aesCMD[2][0],"0x%x",SECURE_KEY_LOADADDR);
+			sprintf(&aesCMD[3][0],"0x%x",SECURE_IV_LOADADDR);			
+
+			printf("Decrypt DTS to 0x%x ...",DTB_LOADADDR);
+			sprintf(&aesCMD[4][0],"0x%x",DTB_LOADADDR);
+			sprintf(dtsaddrstr,"0x%lx",dtsaddr);
+			sprintf(dtsLenrstr,"0x%lx",dtslen);
+			argv[0] = &aesCMD[0][0];
+			argv[1] = &aesCMD[1][0];
+			argv[2] = &aesCMD[2][0];
+			argv[3] = &aesCMD[3][0];
+			argv[4] = &dtsaddrstr[0];
+			argv[5] = &aesCMD[4][0];
+			argv[6] = &dtsLenrstr[0];
+			retval =  do_aes(NULL,0,7,argv);
+			if(retval == 0) { printf("Success\n"); }  else { printf("Failed\n"); return retval;}
+			printf("Decrypt Kernel to 0x%x ...",UIMAGE_LOADADDR);
+			sprintf(&aesCMD[4][0],"0x%x",UIMAGE_LOADADDR);
 			sprintf(AddrStr,"0x%lx",ExecuteAddr);
+			sprintf(lenStr,"0x%lx",len);
+			argv[0] = &aesCMD[0][0];
+			argv[1] = &aesCMD[1][0];
+			argv[2] = &aesCMD[2][0];
+			argv[3] = &aesCMD[3][0];
+			argv[4] = &AddrStr[0];
+			argv[5] = &aesCMD[4][0];
+			argv[6] = &lenStr[0];
+			retval =  do_aes(NULL,0,7,argv);			
+			if(retval == 0) { printf("Success\n"); }  else { printf("Failed\n"); return retval;}
+			printf("Decrypt InitRD to 0x%x ...",INITRD_LOADADDR);
+			sprintf(&aesCMD[4][0],"0x%x",INITRD_LOADADDR);
 			sprintf(INITRDAddrStr,"0x%lx",initrd_address);
-			sprintf(dtsaddrstr,"0x%lx",dtsaddr);
+			sprintf(INITRDLenStr,"0x%lx",initrdlen);
+			argv[0] = &aesCMD[0][0];
+			argv[1] = &aesCMD[1][0];
+			argv[2] = &aesCMD[2][0];
+			argv[3] = &aesCMD[3][0];
+			argv[4] = &INITRDAddrStr[0];
+			argv[5] = &aesCMD[4][0];
+			argv[6] = &INITRDLenStr[0];
+			retval =  do_aes(NULL,0,7,argv);
+			if(retval == 0) { printf("Success\n"); }  else { printf("Failed\n"); return retval;}
+			sprintf(AddrStr,"0x%x",UIMAGE_LOADADDR);
+			sprintf(INITRDAddrStr,"0x%x",INITRD_LOADADDR);
+			sprintf(dtsaddrstr,"0x%x",DTB_LOADADDR);			
+#else
+			sprintf(AddrStr,"0x%lx",ExecuteAddr);
+			sprintf(INITRDAddrStr,"0x%lx",initrd_address);
+			sprintf(dtsaddrstr,"0x%lx",dtsaddr);			
+#endif		
 			argv[0] = &Command[0];
 			argv[1] = &AddrStr[0];
 			argv[2] = &INITRDAddrStr[0];
diff -Naur uboot/oem/ami/fmh/cmd_fmh.h uboot.new/oem/ami/fmh/cmd_fmh.h
--- uboot/oem/ami/fmh/cmd_fmh.h	2020-06-23 17:55:48.970943926 +0800
+++ uboot.new/oem/ami/fmh/cmd_fmh.h	2020-06-23 09:52:39.841361020 +0800
@@ -9,7 +9,9 @@
 /* U-boot's cmd function to list and bootFMH */
 extern int  do_fmh(cmd_tbl_t *, int, int, char * const []);
 extern int  do_bootfmh(cmd_tbl_t *, int, int, char * const []);
-
+#ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_ENCRYPTION_SUPPORT
+extern int  do_aes(cmd_tbl_t *cmdtp, int flag, int argc, char *argv[]);
+#endif
 /* Actual function implementing listing of FMH*/
 extern int  ListFMH(void);	
 extern int  GetFMHSectorLocationSize(char * Name, unsigned long * Location, unsigned long * Size);
