diff -Naur uboot_orig/include/configs/aspeed-common.h uboot/include/configs/aspeed-common.h
--- uboot_orig/include/configs/aspeed-common.h	2020-06-24 15:09:43.233848400 +0530
+++ uboot/include/configs/aspeed-common.h	2020-06-24 15:10:46.234314081 +0530
@@ -81,6 +81,8 @@
 	"verify=yes\0"	\
 	"spi_dma=no\0" \
 	"do_memtest=" __stringify(CONFIG_MEMTEST_ENABLE)        "\0" \
+	"bootselector=1\0" \
+	"recentlyprogfw=1\0" \
 	""
 
 /*
diff -Naur uboot_orig/oem/ami/fmh/cmd_fmh.c uboot/oem/ami/fmh/cmd_fmh.c
--- uboot_orig/oem/ami/fmh/cmd_fmh.c	2020-06-24 15:09:35.449790981 +0530
+++ uboot/oem/ami/fmh/cmd_fmh.c	2020-06-24 15:37:26.870392185 +0530
@@ -710,17 +710,16 @@
 
 int GetBootImage(u8 *imagetoboot)
 {
-#if 0
-	flash_info_t *flinfo;
+	//flash_info_t *flinfo;
 	unsigned long i=0,SectorSize=CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE;
 	unsigned long SectorCount=0,flashsize=0;
 	unsigned long watchdog_reset_status = 0;
-	u8 imgIndex=0,bank=0,img1_presence=0,img2_presence=0;
+	u8 imgIndex=0,img1_presence=0,img2_presence=0;
 	FMH	*fmh = NULL;
 	MODULE_INFO *mod = NULL;
 	VersionInfo firmware_ver[2], platform_ver[2];
 
-
+	struct spi_flash *flash;
 #ifdef CONFIG_SPX_FEATURE_FAIL_SAFE_BOOTING
 #ifdef CONFIG_SPX_FEATURE_SW_FAILSAFE_BOOT
     Enable_watchdog(&watchdog_reset_status);
@@ -730,18 +729,17 @@
 #endif
 #endif
 
-
-	for (bank=0;bank<CONFIG_SYS_MAX_FLASH_BANKS;bank++)
+	flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
+					CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
+	if (flash == NULL)
 	{
-		flinfo = &flash_info[bank];
-		flashsize += flinfo->size;
-		if (flinfo->size == 0)
-			break;
+		puts("\nspi_flash_probe failed");
+		hang();
 	}
 
-	SectorCount=flashsize/SectorSize;
-
-        memset(&firmware_ver,0,sizeof(firmware_ver));
+	flashsize = flash->size;
+	SectorSize = 0x10000;
+	SectorCount = flashsize/SectorSize;
         memset(&platform_ver,0,sizeof(platform_ver));
  
 		/* Scan through the flash for FMH */
@@ -755,7 +753,7 @@
         	        if( (i*SectorSize) >= CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE ) { break; }
 	            #endif
 			/* Check if FMH found at this sector */
-			fmh = ScanforFMH((unsigned char *)(CONFIG_SYS_FLASH_BASE+(i*SectorSize)),SectorSize);
+			fmh = ScanforFMH(flash,(i*SectorSize),SectorSize);
 			if (fmh == NULL)
 			{
 				i++;
@@ -862,7 +860,6 @@
 				#endif
 		 	 }
 		}
-#endif
 return 0;
 }
 
@@ -1048,6 +1045,14 @@
 		return 0;			/* Full Access to Uboot Console */
 	}
 
+	flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
+					CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
+	if (flash == NULL)
+	{
+		puts("\nspi_flash_probe failed");
+		hang();
+	}
+
 #ifdef CONFIG_SPX_FEATURE_GLOBAL_DUAL_IMAGE_SUPPORT
     if( GetBootImage(&imagetoboot) != 0 )
 	 return -1;
@@ -1060,15 +1065,6 @@
 
 	printf("Image to be booted is %d\n",imagetoboot);
 
-
-    flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
-                        CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
-    if (flash == NULL) 
-    {
-        puts("\nspi_flash_probe failed");
-        hang();
-    }
-
     if(imagetoboot == IMAGE_1)
     {
         SectorCount = (CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE/SectorSize);
diff -Naur uboot_orig/oem/ami/fmh/fmhcore.c uboot/oem/ami/fmh/fmhcore.c
--- uboot_orig/oem/ami/fmh/fmhcore.c	2020-06-24 15:09:35.445790951 +0530
+++ uboot/oem/ami/fmh/fmhcore.c	2020-06-24 15:39:38.631579145 +0530
@@ -182,10 +182,12 @@
 	ALT_FMH *altfmh;
 	unsigned long FMH_Offset;
 #if defined CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
+	MODULE_INFO *mod;
 	unsigned long StartAddr = (unsigned long)SectorAddr;
 	unsigned long SecStartAddr = 0;
 	unsigned long i = 0;
 #elif defined CONFIG_SPX_FEATURE_CONTIGIOUS_SPI_MEMORY
+	MODULE_INFO *mod;
 	unsigned long StartAddr = (unsigned long)SectorAddr;
 #endif
     int ret=0;
@@ -219,15 +221,31 @@
 		return NULL;
 	
 #if defined CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
+	mod = &(fmh->Module_Info);
 	for(i = 0; i < CONFIG_SPX_FEATURE_SECONDARY_IMAGE_SPI; i++)
 		SecStartAddr += flash_info[i].size;
 
-	if ((StartAddr - CONFIG_SYS_FLASH_BASE) >= SecStartAddr)
-		flash_read((ulong)CONFIG_SYS_FLASH_BASE+SecStartAddr+FMH_Offset, sizeof(FMH),(char *)&fmh_buffer);
+	if ((StartAddr - le32_to_host(mod->Module_Location)) >= SecStartAddr)
+	{
+		//flash_read((ulong)CONFIG_SYS_FLASH_BASE+SecStartAddr+FMH_Offset, sizeof(FMH),(char *)&fmh_buffer);
+		ret=spi_flash_read(flash,le32_to_host(mod->Module_Location)+SecStartAddr+FMH_Offset, sizeof(FMH),(void *)&fmh_buffer);
+		if(ret)
+		{
+			puts("Error in reading SPI\n");
+		}
+	}
 	else
 #elif defined CONFIG_SPX_FEATURE_CONTIGIOUS_SPI_MEMORY
-	if ((StartAddr - CONFIG_SYS_FLASH_BASE) >= CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE)
-		flash_read((ulong)CONFIG_SYS_FLASH_BASE+CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE+FMH_Offset, sizeof(FMH), (char *)&fmh_buffer);
+	mod = &(fmh->Module_Info);
+	if ((StartAddr - le32_to_host(mod->Module_Location)) >= CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE)
+	{
+		//flash_read((ulong)CONFIG_SYS_FLASH_BASE+CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE+FMH_Offset, sizeof(FMH), (char *)&fmh_buffer);
+		ret=spi_flash_read(flash,le32_to_host(mod->Module_Location)+CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE+FMH_Offset, sizeof(FMH), (void *)&fmh_buffer);
+		if(ret)
+		{
+			puts("Error in reading SPI\n");
+		}
+	}
 	else
 #endif
 
